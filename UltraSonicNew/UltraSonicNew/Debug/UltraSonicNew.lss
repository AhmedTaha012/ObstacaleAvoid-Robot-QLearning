
UltraSonicNew.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000006fc  00000790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800112  00800112  000007a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f4  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a79  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070e  00000000  00000000  00002431  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c1  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000708  00000000  00000000  0000318d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003895  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  9e:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_send_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	98 2f       	mov	r25, r24
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	95 b9       	out	0x05, r25	; 5
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	9e 7f       	andi	r25, 0xFE	; 254
  b0:	95 b9       	out	0x05, r25	; 5
  b2:	95 b1       	in	r25, 0x05	; 5
  b4:	94 60       	ori	r25, 0x04	; 4
  b6:	95 b9       	out	0x05, r25	; 5
  b8:	ef e1       	ldi	r30, 0x1F	; 31
  ba:	fe e4       	ldi	r31, 0x4E	; 78
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_send_command+0x16>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_send_command+0x1c>
  c2:	00 00       	nop
  c4:	95 b1       	in	r25, 0x05	; 5
  c6:	9b 7f       	andi	r25, 0xFB	; 251
  c8:	95 b9       	out	0x05, r25	; 5
  ca:	ef e1       	ldi	r30, 0x1F	; 31
  cc:	fe e4       	ldi	r31, 0x4E	; 78
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_send_command+0x28>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_send_command+0x2e>
  d4:	00 00       	nop
  d6:	f0 e1       	ldi	r31, 0x10	; 16
  d8:	8f 9f       	mul	r24, r31
  da:	c0 01       	movw	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	85 b9       	out	0x05, r24	; 5
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	8f e1       	ldi	r24, 0x1F	; 31
  e8:	9e e4       	ldi	r25, 0x4E	; 78
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_send_command+0x44>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_send_command+0x4a>
  f0:	00 00       	nop
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	ef e1       	ldi	r30, 0x1F	; 31
  fa:	fe e4       	ldi	r31, 0x4E	; 78
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_send_command+0x56>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_send_command+0x5c>
 102:	00 00       	nop
 104:	08 95       	ret

00000106 <lcd_init>:
 106:	8c e6       	ldi	r24, 0x6C	; 108
 108:	84 b9       	out	0x04, r24	; 4
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	87 60       	ori	r24, 0x07	; 7
 10e:	84 b9       	out	0x04, r24	; 4
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	85 b9       	out	0x05, r24	; 5
 114:	85 b1       	in	r24, 0x05	; 5
 116:	84 60       	ori	r24, 0x04	; 4
 118:	85 b9       	out	0x05, r24	; 5
 11a:	8f e1       	ldi	r24, 0x1F	; 31
 11c:	9e e4       	ldi	r25, 0x4E	; 78
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_init+0x18>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_init+0x1e>
 124:	00 00       	nop
 126:	85 b1       	in	r24, 0x05	; 5
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	8f e1       	ldi	r24, 0x1F	; 31
 12e:	9e e4       	ldi	r25, 0x4E	; 78
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_init+0x2a>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcd_init+0x30>
 136:	00 00       	nop
 138:	88 e2       	ldi	r24, 0x28	; 40
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_command>
 13e:	8f e1       	ldi	r24, 0x1F	; 31
 140:	9e e4       	ldi	r25, 0x4E	; 78
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_init+0x3c>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_init+0x42>
 148:	00 00       	nop
 14a:	8f e0       	ldi	r24, 0x0F	; 15
 14c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_command>
 150:	8f e1       	ldi	r24, 0x1F	; 31
 152:	9e e4       	ldi	r25, 0x4E	; 78
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_init+0x4e>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_init+0x54>
 15a:	00 00       	nop
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_command>
 162:	08 95       	ret

00000164 <lcd_write_character>:
 164:	98 2f       	mov	r25, r24
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	95 b9       	out	0x05, r25	; 5
 16a:	95 b1       	in	r25, 0x05	; 5
 16c:	91 60       	ori	r25, 0x01	; 1
 16e:	95 b9       	out	0x05, r25	; 5
 170:	95 b1       	in	r25, 0x05	; 5
 172:	94 60       	ori	r25, 0x04	; 4
 174:	95 b9       	out	0x05, r25	; 5
 176:	ef e1       	ldi	r30, 0x1F	; 31
 178:	fe e4       	ldi	r31, 0x4E	; 78
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_write_character+0x16>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_write_character+0x1c>
 180:	00 00       	nop
 182:	95 b1       	in	r25, 0x05	; 5
 184:	9b 7f       	andi	r25, 0xFB	; 251
 186:	95 b9       	out	0x05, r25	; 5
 188:	ef e1       	ldi	r30, 0x1F	; 31
 18a:	fe e4       	ldi	r31, 0x4E	; 78
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_write_character+0x28>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_write_character+0x2e>
 192:	00 00       	nop
 194:	f0 e1       	ldi	r31, 0x10	; 16
 196:	8f 9f       	mul	r24, r31
 198:	c0 01       	movw	r24, r0
 19a:	11 24       	eor	r1, r1
 19c:	85 b9       	out	0x05, r24	; 5
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	8f e1       	ldi	r24, 0x1F	; 31
 1a6:	9e e4       	ldi	r25, 0x4E	; 78
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_write_character+0x44>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_write_character+0x4a>
 1ae:	00 00       	nop
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	ef e1       	ldi	r30, 0x1F	; 31
 1b8:	fe e4       	ldi	r31, 0x4E	; 78
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_write_character+0x56>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_write_character+0x5c>
 1c0:	00 00       	nop
 1c2:	08 95       	ret

000001c4 <lcd_write_word>:
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	8c 01       	movw	r16, r24
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <lcd_write_word+0x16>
 1d4:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_character>
 1d8:	21 96       	adiw	r28, 0x01	; 1
 1da:	f8 01       	movw	r30, r16
 1dc:	ec 0f       	add	r30, r28
 1de:	fd 1f       	adc	r31, r29
 1e0:	80 81       	ld	r24, Z
 1e2:	81 11       	cpse	r24, r1
 1e4:	f7 cf       	rjmp	.-18     	; 0x1d4 <lcd_write_word+0x10>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	08 95       	ret

000001f0 <lcd_goto_xy>:
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
	_delay_ms(5);
}
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
	lcd_send_command((0x80|(line<<6))+pos);
 1f0:	20 e4       	ldi	r18, 0x40	; 64
 1f2:	82 9f       	mul	r24, r18
 1f4:	c0 01       	movw	r24, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	86 0f       	add	r24, r22
 1fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	87 ec       	ldi	r24, 0xC7	; 199
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_goto_xy+0x14>
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_goto_xy+0x1a>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <main>:
#include  "LCD.h"
#include  "UltraSonicHead.h"

int main(void)
{
    lcd_init();
 20e:	0e 94 83 00 	call	0x106	; 0x106 <lcd_init>
    ultrasonic_init();
 212:	0e 94 30 01 	call	0x260	; 0x260 <ultrasonic_init>
    sei();
 216:	78 94       	sei
    lcd_write_word("Distance is ");
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_write_word>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	9c e9       	ldi	r25, 0x9C	; 156
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <main+0x16>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x1c>
 22a:	00 00       	nop
    _delay_ms(10);
    while (1) 
    {
		  ultra_triger();
 22c:	0e 94 3e 01 	call	0x27c	; 0x27c <ultra_triger>
 230:	8f e5       	ldi	r24, 0x5F	; 95
 232:	9a ee       	ldi	r25, 0xEA	; 234
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <main+0x26>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x2c>
 23a:	00 00       	nop
 23c:	f7 cf       	rjmp	.-18     	; 0x22c <main+0x1e>

0000023e <timer0_init>:
/* max Percentage Value (100%) */

void timer0_init(void)
{
	/* Disable Timer 0 */
	TCCR0A = DISABLE_MODULE_VALUE;
 23e:	14 bc       	out	0x24, r1	; 36
	/* Setting pre scaler */
	TCCR0B = (PRESCLR1_VALUE);
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	85 bd       	out	0x25, r24	; 37
	/* Initializing the timer with zero */
	TCNT0 = ZER0_INITIALIZER;
 244:	16 bc       	out	0x26, r1	; 38
	/* Timer overflow interrupt enable*/
	TIMSK0 |=(1<<TOIE0);
 246:	ee e6       	ldi	r30, 0x6E	; 110
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	81 60       	ori	r24, 0x01	; 1
 24e:	80 83       	st	Z, r24
 250:	08 95       	ret

00000252 <enable_ex_interrupt>:
	return;
}

void enable_ex_interrupt(void){

	MCUCR |= (1<<ISC10);		// Trigger INT1 on any logic change.
 252:	85 b7       	in	r24, 0x35	; 53
 254:	84 60       	ori	r24, 0x04	; 4
 256:	85 bf       	out	0x35, r24	; 53
	EIMSK |= (1<<INT1);			// Enable INT1 interrupts.
 258:	8d b3       	in	r24, 0x1d	; 29
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	8d bb       	out	0x1d, r24	; 29
 25e:	08 95       	ret

00000260 <ultrasonic_init>:



void ultrasonic_init(void){

	TRIGER_DDR|=(1<<TRIGER);
 260:	8a b1       	in	r24, 0x0a	; 10
 262:	81 60       	ori	r24, 0x01	; 1
 264:	8a b9       	out	0x0a, r24	; 10
	ECHO_DDR&=~(1<<ECHO);
 266:	8a b1       	in	r24, 0x0a	; 10
 268:	87 7f       	andi	r24, 0xF7	; 247
 26a:	8a b9       	out	0x0a, r24	; 10
	ECHO_PULLUP|=(1<<ECHO);
 26c:	8b b1       	in	r24, 0x0b	; 11
 26e:	88 60       	ori	r24, 0x08	; 8
 270:	8b b9       	out	0x0b, r24	; 11
	enable_ex_interrupt();
 272:	0e 94 29 01 	call	0x252	; 0x252 <enable_ex_interrupt>
	timer0_init();
 276:	0e 94 1f 01 	call	0x23e	; 0x23e <timer0_init>
 27a:	08 95       	ret

0000027c <ultra_triger>:

	return;
}

void ultra_triger(void){
	if(!sensor_working){
 27c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sensor_working>
 280:	81 11       	cpse	r24, r1
 282:	0c c0       	rjmp	.+24     	; 0x29c <ultra_triger+0x20>
		TRIGER_PORT|=(1<<TRIGER);
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	81 60       	ori	r24, 0x01	; 1
 288:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	80 e5       	ldi	r24, 0x50	; 80
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <ultra_triger+0x10>
		_delay_us(15);
		TRIGER_PORT&=~(1<<TRIGER);
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	8e 7f       	andi	r24, 0xFE	; 254
 294:	8b b9       	out	0x0b, r24	; 11
		sensor_working=1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sensor_working>
 29c:	08 95       	ret

0000029e <__vector_2>:
	}
}

ISR(INT1_vect){
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	2f 93       	push	r18
 2aa:	3f 93       	push	r19
 2ac:	4f 93       	push	r20
 2ae:	5f 93       	push	r21
 2b0:	6f 93       	push	r22
 2b2:	7f 93       	push	r23
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
 2b8:	af 93       	push	r26
 2ba:	bf 93       	push	r27
 2bc:	ef 93       	push	r30
 2be:	ff 93       	push	r31
	if(sensor_working==1){
 2c0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sensor_working>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	09 f0       	breq	.+2      	; 0x2ca <__vector_2+0x2c>
 2c8:	69 c0       	rjmp	.+210    	; 0x39c <__vector_2+0xfe>
		if(rising_edge==0){
 2ca:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <rising_edge>
 2ce:	81 11       	cpse	r24, r1
 2d0:	0d c0       	rjmp	.+26     	; 0x2ec <__vector_2+0x4e>
			TCNT0=0x00;
 2d2:	16 bc       	out	0x26, r1	; 38
			rising_edge=1;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <rising_edge>
			timer_counter=0;
 2da:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 2de:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 2e2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end+0x2>
 2e6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x3>
 2ea:	58 c0       	rjmp	.+176    	; 0x39c <__vector_2+0xfe>
		}
		else{
			distance=(timer_counter*256+TCNT0)/932.8;
 2ec:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 2f0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 2f4:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <__data_end+0x2>
 2f8:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <__data_end+0x3>
 2fc:	ba 2f       	mov	r27, r26
 2fe:	a9 2f       	mov	r26, r25
 300:	98 2f       	mov	r25, r24
 302:	88 27       	eor	r24, r24
 304:	26 b5       	in	r18, 0x26	; 38
 306:	bc 01       	movw	r22, r24
 308:	cd 01       	movw	r24, r26
 30a:	62 0f       	add	r22, r18
 30c:	71 1d       	adc	r23, r1
 30e:	81 1d       	adc	r24, r1
 310:	91 1d       	adc	r25, r1
 312:	0e 94 b9 02 	call	0x572	; 0x572 <__floatunsisf>
 316:	23 e3       	ldi	r18, 0x33	; 51
 318:	33 e3       	ldi	r19, 0x33	; 51
 31a:	49 e6       	ldi	r20, 0x69	; 105
 31c:	54 e4       	ldi	r21, 0x44	; 68
 31e:	0e 94 18 02 	call	0x430	; 0x430 <__divsf3>
 322:	0e 94 8a 02 	call	0x514	; 0x514 <__fixunssfsi>
 326:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <distance>
 32a:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <distance+0x1>
 32e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <distance+0x2>
 332:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <distance+0x3>
			lcd_goto_xy(1,0);
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_goto_xy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 342:	4a e0       	ldi	r20, 0x0A	; 10
 344:	6c e1       	ldi	r22, 0x1C	; 28
 346:	71 e0       	ldi	r23, 0x01	; 1
 348:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <distance>
 34c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <distance+0x1>
 350:	0e 94 47 03 	call	0x68e	; 0x68e <__itoa_ncheck>
			itoa(distance,distance_str,10);
			strcat(distance_str, " cm ");
 354:	ac e1       	ldi	r26, 0x1C	; 28
 356:	b1 e0       	ldi	r27, 0x01	; 1
 358:	0d 90       	ld	r0, X+
 35a:	00 20       	and	r0, r0
 35c:	e9 f7       	brne	.-6      	; 0x358 <__vector_2+0xba>
 35e:	11 97       	sbiw	r26, 0x01	; 1
 360:	85 e0       	ldi	r24, 0x05	; 5
 362:	ed e0       	ldi	r30, 0x0D	; 13
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	01 90       	ld	r0, Z+
 368:	0d 92       	st	X+, r0
 36a:	8a 95       	dec	r24
 36c:	e1 f7       	brne	.-8      	; 0x366 <__vector_2+0xc8>
			lcd_write_word(distance_str);
 36e:	8c e1       	ldi	r24, 0x1C	; 28
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_write_word>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	83 ef       	ldi	r24, 0xF3	; 243
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <__vector_2+0xde>
 384:	00 c0       	rjmp	.+0      	; 0x386 <__vector_2+0xe8>
 386:	00 00       	nop
			_delay_ms(40);
			timer_counter=0;
 388:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 38c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 390:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end+0x2>
 394:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x3>
			rising_edge=0;
 398:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <rising_edge>
		}
	}}
 39c:	ff 91       	pop	r31
 39e:	ef 91       	pop	r30
 3a0:	bf 91       	pop	r27
 3a2:	af 91       	pop	r26
 3a4:	9f 91       	pop	r25
 3a6:	8f 91       	pop	r24
 3a8:	7f 91       	pop	r23
 3aa:	6f 91       	pop	r22
 3ac:	5f 91       	pop	r21
 3ae:	4f 91       	pop	r20
 3b0:	3f 91       	pop	r19
 3b2:	2f 91       	pop	r18
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <__vector_16>:

	ISR(TIMER0_OVF_vect){
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	11 24       	eor	r1, r1
 3c8:	2f 93       	push	r18
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
		timer_counter++;
 3d2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 3d6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 3da:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <__data_end+0x2>
 3de:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <__data_end+0x3>
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	a1 1d       	adc	r26, r1
 3e6:	b1 1d       	adc	r27, r1
 3e8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 3ec:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 3f0:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <__data_end+0x2>
 3f4:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <__data_end+0x3>
		if(timer_counter >730){
 3f8:	8b 3d       	cpi	r24, 0xDB	; 219
 3fa:	92 40       	sbci	r25, 0x02	; 2
 3fc:	a1 05       	cpc	r26, r1
 3fe:	b1 05       	cpc	r27, r1
 400:	68 f0       	brcs	.+26     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			TCNT0=0x00;
 402:	16 bc       	out	0x26, r1	; 38
			sensor_working=0;
 404:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sensor_working>
			rising_edge=0;
 408:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <rising_edge>
			timer_counter=0;
 40c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 410:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 414:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end+0x2>
 418:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x3>
		}
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <__divsf3>:
 430:	0e 94 2c 02 	call	0x458	; 0x458 <__divsf3x>
 434:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_round>
 438:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscB>
 43c:	58 f0       	brcs	.+22     	; 0x454 <__divsf3+0x24>
 43e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_pscA>
 442:	40 f0       	brcs	.+16     	; 0x454 <__divsf3+0x24>
 444:	29 f4       	brne	.+10     	; 0x450 <__divsf3+0x20>
 446:	5f 3f       	cpi	r21, 0xFF	; 255
 448:	29 f0       	breq	.+10     	; 0x454 <__divsf3+0x24>
 44a:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 44e:	51 11       	cpse	r21, r1
 450:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>
 454:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>

00000458 <__divsf3x>:
 458:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_split3>
 45c:	68 f3       	brcs	.-38     	; 0x438 <__divsf3+0x8>

0000045e <__divsf3_pse>:
 45e:	99 23       	and	r25, r25
 460:	b1 f3       	breq	.-20     	; 0x44e <__divsf3+0x1e>
 462:	55 23       	and	r21, r21
 464:	91 f3       	breq	.-28     	; 0x44a <__divsf3+0x1a>
 466:	95 1b       	sub	r25, r21
 468:	55 0b       	sbc	r21, r21
 46a:	bb 27       	eor	r27, r27
 46c:	aa 27       	eor	r26, r26
 46e:	62 17       	cp	r22, r18
 470:	73 07       	cpc	r23, r19
 472:	84 07       	cpc	r24, r20
 474:	38 f0       	brcs	.+14     	; 0x484 <__divsf3_pse+0x26>
 476:	9f 5f       	subi	r25, 0xFF	; 255
 478:	5f 4f       	sbci	r21, 0xFF	; 255
 47a:	22 0f       	add	r18, r18
 47c:	33 1f       	adc	r19, r19
 47e:	44 1f       	adc	r20, r20
 480:	aa 1f       	adc	r26, r26
 482:	a9 f3       	breq	.-22     	; 0x46e <__divsf3_pse+0x10>
 484:	35 d0       	rcall	.+106    	; 0x4f0 <__divsf3_pse+0x92>
 486:	0e 2e       	mov	r0, r30
 488:	3a f0       	brmi	.+14     	; 0x498 <__divsf3_pse+0x3a>
 48a:	e0 e8       	ldi	r30, 0x80	; 128
 48c:	32 d0       	rcall	.+100    	; 0x4f2 <__divsf3_pse+0x94>
 48e:	91 50       	subi	r25, 0x01	; 1
 490:	50 40       	sbci	r21, 0x00	; 0
 492:	e6 95       	lsr	r30
 494:	00 1c       	adc	r0, r0
 496:	ca f7       	brpl	.-14     	; 0x48a <__divsf3_pse+0x2c>
 498:	2b d0       	rcall	.+86     	; 0x4f0 <__divsf3_pse+0x92>
 49a:	fe 2f       	mov	r31, r30
 49c:	29 d0       	rcall	.+82     	; 0x4f0 <__divsf3_pse+0x92>
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	88 1f       	adc	r24, r24
 4a4:	bb 1f       	adc	r27, r27
 4a6:	26 17       	cp	r18, r22
 4a8:	37 07       	cpc	r19, r23
 4aa:	48 07       	cpc	r20, r24
 4ac:	ab 07       	cpc	r26, r27
 4ae:	b0 e8       	ldi	r27, 0x80	; 128
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <__divsf3_pse+0x56>
 4b2:	bb 0b       	sbc	r27, r27
 4b4:	80 2d       	mov	r24, r0
 4b6:	bf 01       	movw	r22, r30
 4b8:	ff 27       	eor	r31, r31
 4ba:	93 58       	subi	r25, 0x83	; 131
 4bc:	5f 4f       	sbci	r21, 0xFF	; 255
 4be:	3a f0       	brmi	.+14     	; 0x4ce <__divsf3_pse+0x70>
 4c0:	9e 3f       	cpi	r25, 0xFE	; 254
 4c2:	51 05       	cpc	r21, r1
 4c4:	78 f0       	brcs	.+30     	; 0x4e4 <__divsf3_pse+0x86>
 4c6:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 4ca:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>
 4ce:	5f 3f       	cpi	r21, 0xFF	; 255
 4d0:	e4 f3       	brlt	.-8      	; 0x4ca <__divsf3_pse+0x6c>
 4d2:	98 3e       	cpi	r25, 0xE8	; 232
 4d4:	d4 f3       	brlt	.-12     	; 0x4ca <__divsf3_pse+0x6c>
 4d6:	86 95       	lsr	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b7 95       	ror	r27
 4de:	f7 95       	ror	r31
 4e0:	9f 5f       	subi	r25, 0xFF	; 255
 4e2:	c9 f7       	brne	.-14     	; 0x4d6 <__divsf3_pse+0x78>
 4e4:	88 0f       	add	r24, r24
 4e6:	91 1d       	adc	r25, r1
 4e8:	96 95       	lsr	r25
 4ea:	87 95       	ror	r24
 4ec:	97 f9       	bld	r25, 7
 4ee:	08 95       	ret
 4f0:	e1 e0       	ldi	r30, 0x01	; 1
 4f2:	66 0f       	add	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	88 1f       	adc	r24, r24
 4f8:	bb 1f       	adc	r27, r27
 4fa:	62 17       	cp	r22, r18
 4fc:	73 07       	cpc	r23, r19
 4fe:	84 07       	cpc	r24, r20
 500:	ba 07       	cpc	r27, r26
 502:	20 f0       	brcs	.+8      	; 0x50c <__divsf3_pse+0xae>
 504:	62 1b       	sub	r22, r18
 506:	73 0b       	sbc	r23, r19
 508:	84 0b       	sbc	r24, r20
 50a:	ba 0b       	sbc	r27, r26
 50c:	ee 1f       	adc	r30, r30
 50e:	88 f7       	brcc	.-30     	; 0x4f2 <__divsf3_pse+0x94>
 510:	e0 95       	com	r30
 512:	08 95       	ret

00000514 <__fixunssfsi>:
 514:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_splitA>
 518:	88 f0       	brcs	.+34     	; 0x53c <__fixunssfsi+0x28>
 51a:	9f 57       	subi	r25, 0x7F	; 127
 51c:	98 f0       	brcs	.+38     	; 0x544 <__fixunssfsi+0x30>
 51e:	b9 2f       	mov	r27, r25
 520:	99 27       	eor	r25, r25
 522:	b7 51       	subi	r27, 0x17	; 23
 524:	b0 f0       	brcs	.+44     	; 0x552 <__fixunssfsi+0x3e>
 526:	e1 f0       	breq	.+56     	; 0x560 <__fixunssfsi+0x4c>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	1a f0       	brmi	.+6      	; 0x538 <__fixunssfsi+0x24>
 532:	ba 95       	dec	r27
 534:	c9 f7       	brne	.-14     	; 0x528 <__fixunssfsi+0x14>
 536:	14 c0       	rjmp	.+40     	; 0x560 <__fixunssfsi+0x4c>
 538:	b1 30       	cpi	r27, 0x01	; 1
 53a:	91 f0       	breq	.+36     	; 0x560 <__fixunssfsi+0x4c>
 53c:	0e 94 40 03 	call	0x680	; 0x680 <__fp_zero>
 540:	b1 e0       	ldi	r27, 0x01	; 1
 542:	08 95       	ret
 544:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_zero>
 548:	67 2f       	mov	r22, r23
 54a:	78 2f       	mov	r23, r24
 54c:	88 27       	eor	r24, r24
 54e:	b8 5f       	subi	r27, 0xF8	; 248
 550:	39 f0       	breq	.+14     	; 0x560 <__fixunssfsi+0x4c>
 552:	b9 3f       	cpi	r27, 0xF9	; 249
 554:	cc f3       	brlt	.-14     	; 0x548 <__fixunssfsi+0x34>
 556:	86 95       	lsr	r24
 558:	77 95       	ror	r23
 55a:	67 95       	ror	r22
 55c:	b3 95       	inc	r27
 55e:	d9 f7       	brne	.-10     	; 0x556 <__fixunssfsi+0x42>
 560:	3e f4       	brtc	.+14     	; 0x570 <__fixunssfsi+0x5c>
 562:	90 95       	com	r25
 564:	80 95       	com	r24
 566:	70 95       	com	r23
 568:	61 95       	neg	r22
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	8f 4f       	sbci	r24, 0xFF	; 255
 56e:	9f 4f       	sbci	r25, 0xFF	; 255
 570:	08 95       	ret

00000572 <__floatunsisf>:
 572:	e8 94       	clt
 574:	09 c0       	rjmp	.+18     	; 0x588 <__floatsisf+0x12>

00000576 <__floatsisf>:
 576:	97 fb       	bst	r25, 7
 578:	3e f4       	brtc	.+14     	; 0x588 <__floatsisf+0x12>
 57a:	90 95       	com	r25
 57c:	80 95       	com	r24
 57e:	70 95       	com	r23
 580:	61 95       	neg	r22
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	99 23       	and	r25, r25
 58a:	a9 f0       	breq	.+42     	; 0x5b6 <__floatsisf+0x40>
 58c:	f9 2f       	mov	r31, r25
 58e:	96 e9       	ldi	r25, 0x96	; 150
 590:	bb 27       	eor	r27, r27
 592:	93 95       	inc	r25
 594:	f6 95       	lsr	r31
 596:	87 95       	ror	r24
 598:	77 95       	ror	r23
 59a:	67 95       	ror	r22
 59c:	b7 95       	ror	r27
 59e:	f1 11       	cpse	r31, r1
 5a0:	f8 cf       	rjmp	.-16     	; 0x592 <__floatsisf+0x1c>
 5a2:	fa f4       	brpl	.+62     	; 0x5e2 <__floatsisf+0x6c>
 5a4:	bb 0f       	add	r27, r27
 5a6:	11 f4       	brne	.+4      	; 0x5ac <__floatsisf+0x36>
 5a8:	60 ff       	sbrs	r22, 0
 5aa:	1b c0       	rjmp	.+54     	; 0x5e2 <__floatsisf+0x6c>
 5ac:	6f 5f       	subi	r22, 0xFF	; 255
 5ae:	7f 4f       	sbci	r23, 0xFF	; 255
 5b0:	8f 4f       	sbci	r24, 0xFF	; 255
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	16 c0       	rjmp	.+44     	; 0x5e2 <__floatsisf+0x6c>
 5b6:	88 23       	and	r24, r24
 5b8:	11 f0       	breq	.+4      	; 0x5be <__floatsisf+0x48>
 5ba:	96 e9       	ldi	r25, 0x96	; 150
 5bc:	11 c0       	rjmp	.+34     	; 0x5e0 <__floatsisf+0x6a>
 5be:	77 23       	and	r23, r23
 5c0:	21 f0       	breq	.+8      	; 0x5ca <__floatsisf+0x54>
 5c2:	9e e8       	ldi	r25, 0x8E	; 142
 5c4:	87 2f       	mov	r24, r23
 5c6:	76 2f       	mov	r23, r22
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <__floatsisf+0x5e>
 5ca:	66 23       	and	r22, r22
 5cc:	71 f0       	breq	.+28     	; 0x5ea <__floatsisf+0x74>
 5ce:	96 e8       	ldi	r25, 0x86	; 134
 5d0:	86 2f       	mov	r24, r22
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	2a f0       	brmi	.+10     	; 0x5e2 <__floatsisf+0x6c>
 5d8:	9a 95       	dec	r25
 5da:	66 0f       	add	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	da f7       	brpl	.-10     	; 0x5d8 <__floatsisf+0x62>
 5e2:	88 0f       	add	r24, r24
 5e4:	96 95       	lsr	r25
 5e6:	87 95       	ror	r24
 5e8:	97 f9       	bld	r25, 7
 5ea:	08 95       	ret

000005ec <__fp_inf>:
 5ec:	97 f9       	bld	r25, 7
 5ee:	9f 67       	ori	r25, 0x7F	; 127
 5f0:	80 e8       	ldi	r24, 0x80	; 128
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	08 95       	ret

000005f8 <__fp_nan>:
 5f8:	9f ef       	ldi	r25, 0xFF	; 255
 5fa:	80 ec       	ldi	r24, 0xC0	; 192
 5fc:	08 95       	ret

000005fe <__fp_pscA>:
 5fe:	00 24       	eor	r0, r0
 600:	0a 94       	dec	r0
 602:	16 16       	cp	r1, r22
 604:	17 06       	cpc	r1, r23
 606:	18 06       	cpc	r1, r24
 608:	09 06       	cpc	r0, r25
 60a:	08 95       	ret

0000060c <__fp_pscB>:
 60c:	00 24       	eor	r0, r0
 60e:	0a 94       	dec	r0
 610:	12 16       	cp	r1, r18
 612:	13 06       	cpc	r1, r19
 614:	14 06       	cpc	r1, r20
 616:	05 06       	cpc	r0, r21
 618:	08 95       	ret

0000061a <__fp_round>:
 61a:	09 2e       	mov	r0, r25
 61c:	03 94       	inc	r0
 61e:	00 0c       	add	r0, r0
 620:	11 f4       	brne	.+4      	; 0x626 <__fp_round+0xc>
 622:	88 23       	and	r24, r24
 624:	52 f0       	brmi	.+20     	; 0x63a <__fp_round+0x20>
 626:	bb 0f       	add	r27, r27
 628:	40 f4       	brcc	.+16     	; 0x63a <__fp_round+0x20>
 62a:	bf 2b       	or	r27, r31
 62c:	11 f4       	brne	.+4      	; 0x632 <__fp_round+0x18>
 62e:	60 ff       	sbrs	r22, 0
 630:	04 c0       	rjmp	.+8      	; 0x63a <__fp_round+0x20>
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	08 95       	ret

0000063c <__fp_split3>:
 63c:	57 fd       	sbrc	r21, 7
 63e:	90 58       	subi	r25, 0x80	; 128
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	59 f0       	breq	.+22     	; 0x65c <__fp_splitA+0x10>
 646:	5f 3f       	cpi	r21, 0xFF	; 255
 648:	71 f0       	breq	.+28     	; 0x666 <__fp_splitA+0x1a>
 64a:	47 95       	ror	r20

0000064c <__fp_splitA>:
 64c:	88 0f       	add	r24, r24
 64e:	97 fb       	bst	r25, 7
 650:	99 1f       	adc	r25, r25
 652:	61 f0       	breq	.+24     	; 0x66c <__fp_splitA+0x20>
 654:	9f 3f       	cpi	r25, 0xFF	; 255
 656:	79 f0       	breq	.+30     	; 0x676 <__fp_splitA+0x2a>
 658:	87 95       	ror	r24
 65a:	08 95       	ret
 65c:	12 16       	cp	r1, r18
 65e:	13 06       	cpc	r1, r19
 660:	14 06       	cpc	r1, r20
 662:	55 1f       	adc	r21, r21
 664:	f2 cf       	rjmp	.-28     	; 0x64a <__fp_split3+0xe>
 666:	46 95       	lsr	r20
 668:	f1 df       	rcall	.-30     	; 0x64c <__fp_splitA>
 66a:	08 c0       	rjmp	.+16     	; 0x67c <__fp_splitA+0x30>
 66c:	16 16       	cp	r1, r22
 66e:	17 06       	cpc	r1, r23
 670:	18 06       	cpc	r1, r24
 672:	99 1f       	adc	r25, r25
 674:	f1 cf       	rjmp	.-30     	; 0x658 <__fp_splitA+0xc>
 676:	86 95       	lsr	r24
 678:	71 05       	cpc	r23, r1
 67a:	61 05       	cpc	r22, r1
 67c:	08 94       	sec
 67e:	08 95       	ret

00000680 <__fp_zero>:
 680:	e8 94       	clt

00000682 <__fp_szero>:
 682:	bb 27       	eor	r27, r27
 684:	66 27       	eor	r22, r22
 686:	77 27       	eor	r23, r23
 688:	cb 01       	movw	r24, r22
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

0000068e <__itoa_ncheck>:
 68e:	bb 27       	eor	r27, r27
 690:	4a 30       	cpi	r20, 0x0A	; 10
 692:	31 f4       	brne	.+12     	; 0x6a0 <__itoa_ncheck+0x12>
 694:	99 23       	and	r25, r25
 696:	22 f4       	brpl	.+8      	; 0x6a0 <__itoa_ncheck+0x12>
 698:	bd e2       	ldi	r27, 0x2D	; 45
 69a:	90 95       	com	r25
 69c:	81 95       	neg	r24
 69e:	9f 4f       	sbci	r25, 0xFF	; 255
 6a0:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__utoa_common>

000006a4 <__utoa_ncheck>:
 6a4:	bb 27       	eor	r27, r27

000006a6 <__utoa_common>:
 6a6:	fb 01       	movw	r30, r22
 6a8:	55 27       	eor	r21, r21
 6aa:	aa 27       	eor	r26, r26
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	aa 1f       	adc	r26, r26
 6b2:	a4 17       	cp	r26, r20
 6b4:	10 f0       	brcs	.+4      	; 0x6ba <__utoa_common+0x14>
 6b6:	a4 1b       	sub	r26, r20
 6b8:	83 95       	inc	r24
 6ba:	50 51       	subi	r21, 0x10	; 16
 6bc:	b9 f7       	brne	.-18     	; 0x6ac <__utoa_common+0x6>
 6be:	a0 5d       	subi	r26, 0xD0	; 208
 6c0:	aa 33       	cpi	r26, 0x3A	; 58
 6c2:	08 f0       	brcs	.+2      	; 0x6c6 <__utoa_common+0x20>
 6c4:	a9 5d       	subi	r26, 0xD9	; 217
 6c6:	a1 93       	st	Z+, r26
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	79 f7       	brne	.-34     	; 0x6aa <__utoa_common+0x4>
 6cc:	b1 11       	cpse	r27, r1
 6ce:	b1 93       	st	Z+, r27
 6d0:	11 92       	st	Z+, r1
 6d2:	cb 01       	movw	r24, r22
 6d4:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <strrev>

000006d8 <strrev>:
 6d8:	dc 01       	movw	r26, r24
 6da:	fc 01       	movw	r30, r24
 6dc:	67 2f       	mov	r22, r23
 6de:	71 91       	ld	r23, Z+
 6e0:	77 23       	and	r23, r23
 6e2:	e1 f7       	brne	.-8      	; 0x6dc <strrev+0x4>
 6e4:	32 97       	sbiw	r30, 0x02	; 2
 6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <strrev+0x18>
 6e8:	7c 91       	ld	r23, X
 6ea:	6d 93       	st	X+, r22
 6ec:	70 83       	st	Z, r23
 6ee:	62 91       	ld	r22, -Z
 6f0:	ae 17       	cp	r26, r30
 6f2:	bf 07       	cpc	r27, r31
 6f4:	c8 f3       	brcs	.-14     	; 0x6e8 <strrev+0x10>
 6f6:	08 95       	ret

000006f8 <_exit>:
 6f8:	f8 94       	cli

000006fa <__stop_program>:
 6fa:	ff cf       	rjmp	.-2      	; 0x6fa <__stop_program>
