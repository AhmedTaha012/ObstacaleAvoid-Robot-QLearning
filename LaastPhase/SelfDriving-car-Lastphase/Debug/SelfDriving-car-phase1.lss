
SelfDriving-car-phase1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00001c5a  00001cee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800226  00800226  00001e14  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002131  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca5  00000000  00000000  000041a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000100e  00000000  00000000  00004e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000059c  00000000  00000000  00005e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000886  00000000  00000000  000063f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000125b  00000000  00000000  00006c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00007ed9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__vector_1>
       8:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e5       	ldi	r30, 0x5A	; 90
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 32       	cpi	r26, 0x26	; 38
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 e2       	ldi	r26, 0x26	; 38
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 3a       	cpi	r26, 0xA8	; 168
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 1a 04 	call	0x834	; 0x834 <main>
      9e:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include <avr/io.h>



void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));   // 16Mhz/128 = 125Khz the ADC reference clock
      a6:	ea e7       	ldi	r30, 0x7A	; 122
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	87 60       	ori	r24, 0x07	; 7
      ae:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                            // Voltage reference from Avcc (5v)
      b0:	ac e7       	ldi	r26, 0x7C	; 124
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	8c 91       	ld	r24, X
      b6:	80 64       	ori	r24, 0x40	; 64
      b8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                            // Turn on ADC
      ba:	80 81       	ld	r24, Z
      bc:	80 68       	ori	r24, 0x80	; 128
      be:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                            // Do an initial conversion because this one is the slowest and to ensure that everything is up and running
      c0:	80 81       	ld	r24, Z
      c2:	80 64       	ori	r24, 0x40	; 64
      c4:	80 83       	st	Z, r24
      c6:	08 95       	ret

000000c8 <read_adc>:
}
uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;                            // Clear the older channel that was read
      c8:	ec e7       	ldi	r30, 0x7C	; 124
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	90 81       	ld	r25, Z
      ce:	90 7f       	andi	r25, 0xF0	; 240
      d0:	90 83       	st	Z, r25
	ADMUX |= channel;                            // Defines the new ADC channel to be read
      d2:	90 81       	ld	r25, Z
      d4:	89 2b       	or	r24, r25
      d6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                            // Starts a new conversion
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	80 64       	ori	r24, 0x40	; 64
      e0:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));                        // Wait until the conversion is done
      e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      e6:	86 fd       	sbrc	r24, 6
      e8:	fc cf       	rjmp	.-8      	; 0xe2 <read_adc+0x1a>
	return ADCW;                                // Returns the ADC value of the chosen channel
      ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
      ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
      f2:	08 95       	ret

000000f4 <seed_init>:
void seed_init()
{
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
      f8:	cf 93       	push	r28
	uint16_t u_rand_val = 0;
	uint16_t u_seed_rand_val = 0;
	adc_init();
      fa:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	//Note we're assuming the channel that you are reading from is FLOATING or hooked up to something very noisy.
	//Gather bits from the adc, pushing them into your pseudorandom seed.
	for(uint8_t i=0; i<16; i++){
      fe:	c0 e0       	ldi	r28, 0x00	; 0
	return ADCW;                                // Returns the ADC value of the chosen channel
}
void seed_init()
{
	uint16_t u_rand_val = 0;
	uint16_t u_seed_rand_val = 0;
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	90 e0       	ldi	r25, 0x00	; 0
	adc_init();
	//Note we're assuming the channel that you are reading from is FLOATING or hooked up to something very noisy.
	//Gather bits from the adc, pushing them into your pseudorandom seed.
	for(uint8_t i=0; i<16; i++){
     104:	0b c0       	rjmp	.+22     	; 0x11c <seed_init+0x28>
		u_seed_rand_val = u_seed_rand_val<<1 | (read_adc(i)&0b1);
     106:	8c 01       	movw	r16, r24
     108:	00 0f       	add	r16, r16
     10a:	11 1f       	adc	r17, r17
     10c:	8c 2f       	mov	r24, r28
     10e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_adc>
     112:	81 70       	andi	r24, 0x01	; 1
     114:	99 27       	eor	r25, r25
     116:	80 2b       	or	r24, r16
     118:	91 2b       	or	r25, r17
	uint16_t u_rand_val = 0;
	uint16_t u_seed_rand_val = 0;
	adc_init();
	//Note we're assuming the channel that you are reading from is FLOATING or hooked up to something very noisy.
	//Gather bits from the adc, pushing them into your pseudorandom seed.
	for(uint8_t i=0; i<16; i++){
     11a:	cf 5f       	subi	r28, 0xFF	; 255
     11c:	c0 31       	cpi	r28, 0x10	; 16
     11e:	98 f3       	brcs	.-26     	; 0x106 <seed_init+0x12>
		u_seed_rand_val = u_seed_rand_val<<1 | (read_adc(i)&0b1);
	}
	srand (u_seed_rand_val);
     120:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <srand>

     124:	cf 91       	pop	r28
     126:	1f 91       	pop	r17
     128:	0f 91       	pop	r16
     12a:	08 95       	ret

0000012c <update_epsilon>:
// functions declaration 
float MAXIMUM(int Next_state);
void seed_init();

void update_epsilon(){
	epsilon=0.98*epsilon;
     12c:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <epsilon>
     130:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <epsilon+0x1>
     134:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <epsilon+0x2>
     138:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <epsilon+0x3>
     13c:	28 e4       	ldi	r18, 0x48	; 72
     13e:	31 ee       	ldi	r19, 0xE1	; 225
     140:	4a e7       	ldi	r20, 0x7A	; 122
     142:	5f e3       	ldi	r21, 0x3F	; 63
     144:	0e 94 ed 09 	call	0x13da	; 0x13da <__mulsf3>
     148:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <epsilon>
     14c:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <epsilon+0x1>
     150:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <epsilon+0x2>
     154:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <epsilon+0x3>
     158:	08 95       	ret

0000015a <Explore_Exploit>:
}

bool Explore_Exploit(){      //returns 1 if explore, 0 if exploit
	double randomno=rand()%100;
     15a:	0e 94 ce 0a 	call	0x159c	; 0x159c <rand>
     15e:	64 e6       	ldi	r22, 0x64	; 100
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     166:	bc 01       	movw	r22, r24
     168:	99 0f       	add	r25, r25
     16a:	88 0b       	sbc	r24, r24
     16c:	99 0b       	sbc	r25, r25
     16e:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatsisf>
	if(randomno/100<epsilon){
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	48 ec       	ldi	r20, 0xC8	; 200
     178:	52 e4       	ldi	r21, 0x42	; 66
     17a:	0e 94 93 08 	call	0x1126	; 0x1126 <__divsf3>
     17e:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <epsilon>
     182:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <epsilon+0x1>
     186:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <epsilon+0x2>
     18a:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <epsilon+0x3>
     18e:	0e 94 8e 08 	call	0x111c	; 0x111c <__cmpsf2>
     192:	88 23       	and	r24, r24
     194:	14 f4       	brge	.+4      	; 0x19a <Explore_Exploit+0x40>
		return true;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	08 95       	ret
	}
	else{return false;
     19a:	80 e0       	ldi	r24, 0x00	; 0
	}
}  
     19c:	08 95       	ret

0000019e <rand_Action>:

int rand_Action(){
	int random_num=rand()%3;//0 1 2 3 4
     19e:	0e 94 ce 0a 	call	0x159c	; 0x159c <rand>
     1a2:	63 e0       	ldi	r22, 0x03	; 3
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
	return random_num;
} 
     1aa:	08 95       	ret

000001ac <sensor_reading>:

int sensor_reading(){
	return get_states_of_ultrasonic();
     1ac:	0e 94 e6 07 	call	0xfcc	; 0xfcc <get_states_of_ultrasonic>
}
     1b0:	08 95       	ret

000001b2 <MAXIMUM>:
  Q_MAX = MAXIMUM(NEXT_S); //=>0
  Q_NEW = (1-LEARNING_RATE)*Q_OLD + LEARNING_RATE*(R + DISCOUNT_FACTOR*Q_MAX); 
  Q_Matrix[S][A] = Q_NEW;                          
}

float MAXIMUM(int Next_state){
     1b2:	6f 92       	push	r6
     1b4:	7f 92       	push	r7
     1b6:	8f 92       	push	r8
     1b8:	9f 92       	push	r9
     1ba:	af 92       	push	r10
     1bc:	bf 92       	push	r11
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	ec 01       	movw	r28, r24
	float max_no=-999;
	int i,index;
	for(i=0;i<number_of_action;i++){
     1d0:	00 e0       	ldi	r16, 0x00	; 0
     1d2:	10 e0       	ldi	r17, 0x00	; 0
  Q_NEW = (1-LEARNING_RATE)*Q_OLD + LEARNING_RATE*(R + DISCOUNT_FACTOR*Q_MAX); 
  Q_Matrix[S][A] = Q_NEW;                          
}

float MAXIMUM(int Next_state){
	float max_no=-999;
     1d4:	81 2c       	mov	r8, r1
     1d6:	0f 2e       	mov	r0, r31
     1d8:	f0 ec       	ldi	r31, 0xC0	; 192
     1da:	af 2e       	mov	r10, r31
     1dc:	f0 2d       	mov	r31, r0
     1de:	0f 2e       	mov	r0, r31
     1e0:	f9 e7       	ldi	r31, 0x79	; 121
     1e2:	bf 2e       	mov	r11, r31
     1e4:	f0 2d       	mov	r31, r0
     1e6:	0f 2e       	mov	r0, r31
     1e8:	f4 ec       	ldi	r31, 0xC4	; 196
     1ea:	9f 2e       	mov	r9, r31
     1ec:	f0 2d       	mov	r31, r0
	int i,index;
	for(i=0;i<number_of_action;i++){
     1ee:	24 c0       	rjmp	.+72     	; 0x238 <MAXIMUM+0x86>
		if(Q_Matrix[Next_state][i]>max_no)
     1f0:	fe 01       	movw	r30, r28
     1f2:	ee 0f       	add	r30, r30
     1f4:	ff 1f       	adc	r31, r31
     1f6:	ec 0f       	add	r30, r28
     1f8:	fd 1f       	adc	r31, r29
     1fa:	e0 0f       	add	r30, r16
     1fc:	f1 1f       	adc	r31, r17
     1fe:	ee 0f       	add	r30, r30
     200:	ff 1f       	adc	r31, r31
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ea 5d       	subi	r30, 0xDA	; 218
     208:	fd 4f       	sbci	r31, 0xFD	; 253
     20a:	c0 80       	ld	r12, Z
     20c:	d1 80       	ldd	r13, Z+1	; 0x01
     20e:	e2 80       	ldd	r14, Z+2	; 0x02
     210:	f3 80       	ldd	r15, Z+3	; 0x03
     212:	2c 2d       	mov	r18, r12
     214:	3d 2d       	mov	r19, r13
     216:	4e 2d       	mov	r20, r14
     218:	5f 2d       	mov	r21, r15
     21a:	68 2d       	mov	r22, r8
     21c:	7a 2d       	mov	r23, r10
     21e:	8b 2d       	mov	r24, r11
     220:	99 2d       	mov	r25, r9
     222:	0e 94 8e 08 	call	0x111c	; 0x111c <__cmpsf2>
     226:	88 23       	and	r24, r24
     228:	2c f4       	brge	.+10     	; 0x234 <MAXIMUM+0x82>
		{
		    max_no=Q_Matrix[Next_state][i];
			index=i;
     22a:	38 01       	movw	r6, r16
	float max_no=-999;
	int i,index;
	for(i=0;i<number_of_action;i++){
		if(Q_Matrix[Next_state][i]>max_no)
		{
		    max_no=Q_Matrix[Next_state][i];
     22c:	8c 2c       	mov	r8, r12
     22e:	ad 2c       	mov	r10, r13
     230:	be 2c       	mov	r11, r14
     232:	9f 2c       	mov	r9, r15
}

float MAXIMUM(int Next_state){
	float max_no=-999;
	int i,index;
	for(i=0;i<number_of_action;i++){
     234:	0f 5f       	subi	r16, 0xFF	; 255
     236:	1f 4f       	sbci	r17, 0xFF	; 255
     238:	03 30       	cpi	r16, 0x03	; 3
     23a:	11 05       	cpc	r17, r1
     23c:	cc f2       	brlt	.-78     	; 0x1f0 <MAXIMUM+0x3e>
		    max_no=Q_Matrix[Next_state][i];
			index=i;
		}
		
	} 
	float MAXIMUM_VALUE=Q_Matrix[Next_state][index];
     23e:	ce 01       	movw	r24, r28
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	c8 0f       	add	r28, r24
     246:	d9 1f       	adc	r29, r25
     248:	c6 0d       	add	r28, r6
     24a:	d7 1d       	adc	r29, r7
     24c:	cc 0f       	add	r28, r28
     24e:	dd 1f       	adc	r29, r29
     250:	cc 0f       	add	r28, r28
     252:	dd 1f       	adc	r29, r29
     254:	ca 5d       	subi	r28, 0xDA	; 218
     256:	dd 4f       	sbci	r29, 0xFD	; 253
     258:	68 81       	ld	r22, Y
     25a:	79 81       	ldd	r23, Y+1	; 0x01
     25c:	8a 81       	ldd	r24, Y+2	; 0x02
     25e:	9b 81       	ldd	r25, Y+3	; 0x03
	return MAXIMUM_VALUE; // the highest in this state (Next state) 
	
}
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	ff 90       	pop	r15
     26a:	ef 90       	pop	r14
     26c:	df 90       	pop	r13
     26e:	cf 90       	pop	r12
     270:	bf 90       	pop	r11
     272:	af 90       	pop	r10
     274:	9f 90       	pop	r9
     276:	8f 90       	pop	r8
     278:	7f 90       	pop	r7
     27a:	6f 90       	pop	r6
     27c:	08 95       	ret

0000027e <Update>:
	return get_states_of_ultrasonic();
}


void Update(int S, int NEXT_S, int A, double R, double LEARNING_RATE, double DISCOUNT_FACTOR)
{
     27e:	4f 92       	push	r4
     280:	5f 92       	push	r5
     282:	6f 92       	push	r6
     284:	7f 92       	push	r7
     286:	8f 92       	push	r8
     288:	9f 92       	push	r9
     28a:	af 92       	push	r10
     28c:	bf 92       	push	r11
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	28 97       	sbiw	r28, 0x08	; 8
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	f8 94       	cli
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	cd bf       	out	0x3d, r28	; 61
     2ae:	0d 83       	std	Y+5, r16	; 0x05
     2b0:	1e 83       	std	Y+6, r17	; 0x06
     2b2:	2f 83       	std	Y+7, r18	; 0x07
     2b4:	38 87       	std	Y+8, r19	; 0x08
  Q_OLD = Q_Matrix[S][A];    //=>0                    
     2b6:	8c 01       	movw	r16, r24
     2b8:	00 0f       	add	r16, r16
     2ba:	11 1f       	adc	r17, r17
     2bc:	08 0f       	add	r16, r24
     2be:	19 1f       	adc	r17, r25
     2c0:	04 0f       	add	r16, r20
     2c2:	15 1f       	adc	r17, r21
     2c4:	00 0f       	add	r16, r16
     2c6:	11 1f       	adc	r17, r17
     2c8:	00 0f       	add	r16, r16
     2ca:	11 1f       	adc	r17, r17
     2cc:	0a 5d       	subi	r16, 0xDA	; 218
     2ce:	1d 4f       	sbci	r17, 0xFD	; 253
     2d0:	d8 01       	movw	r26, r16
     2d2:	4d 90       	ld	r4, X+
     2d4:	5d 90       	ld	r5, X+
     2d6:	6d 90       	ld	r6, X+
     2d8:	7c 90       	ld	r7, X
     2da:	40 92 93 02 	sts	0x0293, r4	; 0x800293 <Q_OLD>
     2de:	50 92 94 02 	sts	0x0294, r5	; 0x800294 <Q_OLD+0x1>
     2e2:	60 92 95 02 	sts	0x0295, r6	; 0x800295 <Q_OLD+0x2>
     2e6:	70 92 96 02 	sts	0x0296, r7	; 0x800296 <Q_OLD+0x3>
  Q_MAX = MAXIMUM(NEXT_S); //=>0
     2ea:	cb 01       	movw	r24, r22
     2ec:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <MAXIMUM>
     2f0:	69 83       	std	Y+1, r22	; 0x01
     2f2:	7a 83       	std	Y+2, r23	; 0x02
     2f4:	8b 83       	std	Y+3, r24	; 0x03
     2f6:	9c 83       	std	Y+4, r25	; 0x04
     2f8:	60 93 9b 02 	sts	0x029B, r22	; 0x80029b <Q_MAX>
     2fc:	70 93 9c 02 	sts	0x029C, r23	; 0x80029c <Q_MAX+0x1>
     300:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <Q_MAX+0x2>
     304:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <Q_MAX+0x3>
  Q_NEW = (1-LEARNING_RATE)*Q_OLD + LEARNING_RATE*(R + DISCOUNT_FACTOR*Q_MAX); 
     308:	a7 01       	movw	r20, r14
     30a:	96 01       	movw	r18, r12
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	80 e8       	ldi	r24, 0x80	; 128
     312:	9f e3       	ldi	r25, 0x3F	; 63
     314:	0e 94 21 08 	call	0x1042	; 0x1042 <__subsf3>
     318:	9b 01       	movw	r18, r22
     31a:	ac 01       	movw	r20, r24
     31c:	c3 01       	movw	r24, r6
     31e:	b2 01       	movw	r22, r4
     320:	0e 94 ed 09 	call	0x13da	; 0x13da <__mulsf3>
     324:	2b 01       	movw	r4, r22
     326:	3c 01       	movw	r6, r24
     328:	a5 01       	movw	r20, r10
     32a:	94 01       	movw	r18, r8
     32c:	69 81       	ldd	r22, Y+1	; 0x01
     32e:	7a 81       	ldd	r23, Y+2	; 0x02
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	9c 81       	ldd	r25, Y+4	; 0x04
     334:	0e 94 ed 09 	call	0x13da	; 0x13da <__mulsf3>
     338:	2d 81       	ldd	r18, Y+5	; 0x05
     33a:	3e 81       	ldd	r19, Y+6	; 0x06
     33c:	4f 81       	ldd	r20, Y+7	; 0x07
     33e:	58 85       	ldd	r21, Y+8	; 0x08
     340:	0e 94 22 08 	call	0x1044	; 0x1044 <__addsf3>
     344:	9b 01       	movw	r18, r22
     346:	ac 01       	movw	r20, r24
     348:	c7 01       	movw	r24, r14
     34a:	b6 01       	movw	r22, r12
     34c:	0e 94 ed 09 	call	0x13da	; 0x13da <__mulsf3>
     350:	9b 01       	movw	r18, r22
     352:	ac 01       	movw	r20, r24
     354:	c3 01       	movw	r24, r6
     356:	b2 01       	movw	r22, r4
     358:	0e 94 22 08 	call	0x1044	; 0x1044 <__addsf3>
     35c:	60 93 8d 02 	sts	0x028D, r22	; 0x80028d <Q_NEW>
     360:	70 93 8e 02 	sts	0x028E, r23	; 0x80028e <Q_NEW+0x1>
     364:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <Q_NEW+0x2>
     368:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <Q_NEW+0x3>
  Q_Matrix[S][A] = Q_NEW;                          
     36c:	f8 01       	movw	r30, r16
     36e:	60 83       	st	Z, r22
     370:	71 83       	std	Z+1, r23	; 0x01
     372:	82 83       	std	Z+2, r24	; 0x02
     374:	93 83       	std	Z+3, r25	; 0x03
}
     376:	28 96       	adiw	r28, 0x08	; 8
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14
     38e:	df 90       	pop	r13
     390:	cf 90       	pop	r12
     392:	bf 90       	pop	r11
     394:	af 90       	pop	r10
     396:	9f 90       	pop	r9
     398:	8f 90       	pop	r8
     39a:	7f 90       	pop	r7
     39c:	6f 90       	pop	r6
     39e:	5f 90       	pop	r5
     3a0:	4f 90       	pop	r4
     3a2:	08 95       	ret

000003a4 <MAX_Action_InState>:
	float MAXIMUM_VALUE=Q_Matrix[Next_state][index];
	return MAXIMUM_VALUE; // the highest in this state (Next state) 
	
}

float MAX_Action_InState(int state){
     3a4:	6f 92       	push	r6
     3a6:	7f 92       	push	r7
     3a8:	8f 92       	push	r8
     3aa:	9f 92       	push	r9
     3ac:	af 92       	push	r10
     3ae:	bf 92       	push	r11
     3b0:	cf 92       	push	r12
     3b2:	df 92       	push	r13
     3b4:	ef 92       	push	r14
     3b6:	ff 92       	push	r15
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	8c 01       	movw	r16, r24
	float max=-999;
	int i,index;
	for(i=0;i<number_of_action;i++){
     3c2:	c0 e0       	ldi	r28, 0x00	; 0
     3c4:	d0 e0       	ldi	r29, 0x00	; 0
	return MAXIMUM_VALUE; // the highest in this state (Next state) 
	
}

float MAX_Action_InState(int state){
	float max=-999;
     3c6:	81 2c       	mov	r8, r1
     3c8:	0f 2e       	mov	r0, r31
     3ca:	f0 ec       	ldi	r31, 0xC0	; 192
     3cc:	af 2e       	mov	r10, r31
     3ce:	f0 2d       	mov	r31, r0
     3d0:	0f 2e       	mov	r0, r31
     3d2:	f9 e7       	ldi	r31, 0x79	; 121
     3d4:	bf 2e       	mov	r11, r31
     3d6:	f0 2d       	mov	r31, r0
     3d8:	0f 2e       	mov	r0, r31
     3da:	f4 ec       	ldi	r31, 0xC4	; 196
     3dc:	9f 2e       	mov	r9, r31
     3de:	f0 2d       	mov	r31, r0
	int i,index;
	for(i=0;i<number_of_action;i++){
     3e0:	23 c0       	rjmp	.+70     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		if(Q_Matrix[state][i]>max)
     3e2:	f8 01       	movw	r30, r16
     3e4:	ee 0f       	add	r30, r30
     3e6:	ff 1f       	adc	r31, r31
     3e8:	e0 0f       	add	r30, r16
     3ea:	f1 1f       	adc	r31, r17
     3ec:	ec 0f       	add	r30, r28
     3ee:	fd 1f       	adc	r31, r29
     3f0:	ee 0f       	add	r30, r30
     3f2:	ff 1f       	adc	r31, r31
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	ea 5d       	subi	r30, 0xDA	; 218
     3fa:	fd 4f       	sbci	r31, 0xFD	; 253
     3fc:	c0 80       	ld	r12, Z
     3fe:	d1 80       	ldd	r13, Z+1	; 0x01
     400:	e2 80       	ldd	r14, Z+2	; 0x02
     402:	f3 80       	ldd	r15, Z+3	; 0x03
     404:	2c 2d       	mov	r18, r12
     406:	3d 2d       	mov	r19, r13
     408:	4e 2d       	mov	r20, r14
     40a:	5f 2d       	mov	r21, r15
     40c:	68 2d       	mov	r22, r8
     40e:	7a 2d       	mov	r23, r10
     410:	8b 2d       	mov	r24, r11
     412:	99 2d       	mov	r25, r9
     414:	0e 94 8e 08 	call	0x111c	; 0x111c <__cmpsf2>
     418:	88 23       	and	r24, r24
     41a:	2c f4       	brge	.+10     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		{
			max=Q_Matrix[state][i];
			index=i;
     41c:	3e 01       	movw	r6, r28
	float max=-999;
	int i,index;
	for(i=0;i<number_of_action;i++){
		if(Q_Matrix[state][i]>max)
		{
			max=Q_Matrix[state][i];
     41e:	8c 2c       	mov	r8, r12
     420:	ad 2c       	mov	r10, r13
     422:	be 2c       	mov	r11, r14
     424:	9f 2c       	mov	r9, r15
}

float MAX_Action_InState(int state){
	float max=-999;
	int i,index;
	for(i=0;i<number_of_action;i++){
     426:	21 96       	adiw	r28, 0x01	; 1
     428:	c3 30       	cpi	r28, 0x03	; 3
     42a:	d1 05       	cpc	r29, r1
     42c:	d4 f2       	brlt	.-76     	; 0x3e2 <MAX_Action_InState+0x3e>
			index=i;
		}
		
	}
	
	return index; // the highest in this state (Next state)
     42e:	b3 01       	movw	r22, r6
     430:	77 0c       	add	r7, r7
     432:	88 0b       	sbc	r24, r24
     434:	99 0b       	sbc	r25, r25
     436:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatsisf>
	
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	df 90       	pop	r13
     448:	cf 90       	pop	r12
     44a:	bf 90       	pop	r11
     44c:	af 90       	pop	r10
     44e:	9f 90       	pop	r9
     450:	8f 90       	pop	r8
     452:	7f 90       	pop	r7
     454:	6f 90       	pop	r6
     456:	08 95       	ret

00000458 <prints_int>:
	}
}

///////////////////Print int value on Serial monitor/////////////////////////
void prints_int(int value,int size )
{   sprintf(distance_str_1, "%d", value);
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	8b 01       	movw	r16, r22
     462:	9f 93       	push	r25
     464:	8f 93       	push	r24
     466:	85 e4       	ldi	r24, 0x45	; 69
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	9f 93       	push	r25
     46c:	8f 93       	push	r24
     46e:	82 e6       	ldi	r24, 0x62	; 98
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	0e 94 de 0a 	call	0x15bc	; 0x15bc <sprintf>
	for (int i=0;i<size;i++)
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	c0 e0       	ldi	r28, 0x00	; 0
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	0d c0       	rjmp	.+26     	; 0x4a6 <prints_int+0x4e>
	{
		Serial_print(distance_str_1[i]);
     48c:	fe 01       	movw	r30, r28
     48e:	ee 59       	subi	r30, 0x9E	; 158
     490:	fd 4f       	sbci	r31, 0xFD	; 253
     492:	80 81       	ld	r24, Z
     494:	0e 94 16 06 	call	0xc2c	; 0xc2c <Serial_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     498:	87 e8       	ldi	r24, 0x87	; 135
     49a:	93 e1       	ldi	r25, 0x13	; 19
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <prints_int+0x44>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <prints_int+0x4a>
     4a2:	00 00       	nop
}

///////////////////Print int value on Serial monitor/////////////////////////
void prints_int(int value,int size )
{   sprintf(distance_str_1, "%d", value);
	for (int i=0;i<size;i++)
     4a4:	21 96       	adiw	r28, 0x01	; 1
     4a6:	c0 17       	cp	r28, r16
     4a8:	d1 07       	cpc	r29, r17
     4aa:	84 f3       	brlt	.-32     	; 0x48c <prints_int+0x34>
	{
		Serial_print(distance_str_1[i]);
		_delay_ms(20);
	}
	//Serial_print('\n');
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	08 95       	ret

000004b6 <prints_String>:


///////////////////Print String value on Serial monitor/////////////////////////
void prints_String(char value[],int size )
{
     4b6:	ef 92       	push	r14
     4b8:	ff 92       	push	r15
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	7c 01       	movw	r14, r24
     4c4:	8b 01       	movw	r16, r22
	for (int i=0;i<size;i++)
     4c6:	c0 e0       	ldi	r28, 0x00	; 0
     4c8:	d0 e0       	ldi	r29, 0x00	; 0
     4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <prints_String+0x30>
	{
		Serial_print(value[i]);
     4cc:	f7 01       	movw	r30, r14
     4ce:	ec 0f       	add	r30, r28
     4d0:	fd 1f       	adc	r31, r29
     4d2:	80 81       	ld	r24, Z
     4d4:	0e 94 16 06 	call	0xc2c	; 0xc2c <Serial_print>
     4d8:	87 e8       	ldi	r24, 0x87	; 135
     4da:	93 e1       	ldi	r25, 0x13	; 19
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <prints_String+0x26>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <prints_String+0x2c>
     4e2:	00 00       	nop


///////////////////Print String value on Serial monitor/////////////////////////
void prints_String(char value[],int size )
{
	for (int i=0;i<size;i++)
     4e4:	21 96       	adiw	r28, 0x01	; 1
     4e6:	c0 17       	cp	r28, r16
     4e8:	d1 07       	cpc	r29, r17
     4ea:	84 f3       	brlt	.-32     	; 0x4cc <prints_String+0x16>
	{
		Serial_print(value[i]);
		_delay_ms(20);
	}
	
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	08 95       	ret

000004fa <Action_Done>:
	
	
//////////////////Function to do choosen action//////////////////////////////////	
void Action_Done(int action){
	
	if(action==0)
     4fa:	00 97       	sbiw	r24, 0x00	; 0
     4fc:	19 f4       	brne	.+6      	; 0x504 <Action_Done+0xa>
	{
	    Move_Forward();
     4fe:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Move_Forward>
     502:	08 95       	ret
	}
	else if (action==1)
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	91 05       	cpc	r25, r1
     508:	19 f4       	brne	.+6      	; 0x510 <Action_Done+0x16>
	{
	   	Move_Left();
     50a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <Move_Left>
     50e:	08 95       	ret
	}
	else if (action==2)
     510:	82 30       	cpi	r24, 0x02	; 2
     512:	91 05       	cpc	r25, r1
     514:	19 f4       	brne	.+6      	; 0x51c <Action_Done+0x22>
	{
		Move_Right();
     516:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Move_Right>
     51a:	08 95       	ret
	}
	else if (action==3)
     51c:	03 97       	sbiw	r24, 0x03	; 3
     51e:	11 f4       	brne	.+4      	; 0x524 <Action_Done+0x2a>
	{
		Stop();
     520:	0e 94 04 06 	call	0xc08	; 0xc08 <Stop>
     524:	08 95       	ret

00000526 <double2string>:



/////////////////////////////////Print double values on Serial monitor

void double2string (double number, char integers[], char floats[]){
     526:	2f 92       	push	r2
     528:	3f 92       	push	r3
     52a:	4f 92       	push	r4
     52c:	5f 92       	push	r5
     52e:	6f 92       	push	r6
     530:	7f 92       	push	r7
     532:	8f 92       	push	r8
     534:	9f 92       	push	r9
     536:	af 92       	push	r10
     538:	bf 92       	push	r11
     53a:	cf 92       	push	r12
     53c:	df 92       	push	r13
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	00 d0       	rcall	.+0      	; 0x54c <double2string+0x26>
     54c:	00 d0       	rcall	.+0      	; 0x54e <double2string+0x28>
     54e:	00 d0       	rcall	.+0      	; 0x550 <double2string+0x2a>
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	69 83       	std	Y+1, r22	; 0x01
     556:	7a 83       	std	Y+2, r23	; 0x02
     558:	8b 83       	std	Y+3, r24	; 0x03
     55a:	9c 83       	std	Y+4, r25	; 0x04
     55c:	8a 01       	movw	r16, r20
     55e:	3e 83       	std	Y+6, r19	; 0x06
     560:	2d 83       	std	Y+5, r18	; 0x05
	integers[3] = (  (int)number)%10;
     562:	0e 94 05 09 	call	0x120a	; 0x120a <__fixsfsi>
     566:	2b 01       	movw	r4, r22
     568:	3c 01       	movw	r6, r24
     56a:	0f 2e       	mov	r0, r31
     56c:	fa e0       	ldi	r31, 0x0A	; 10
     56e:	cf 2e       	mov	r12, r31
     570:	d1 2c       	mov	r13, r1
     572:	f0 2d       	mov	r31, r0
     574:	cb 01       	movw	r24, r22
     576:	b6 01       	movw	r22, r12
     578:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     57c:	9c 01       	movw	r18, r24
     57e:	d8 01       	movw	r26, r16
     580:	13 96       	adiw	r26, 0x03	; 3
     582:	8c 93       	st	X, r24
	integers[2] = ( ((int)number)%100 - ((int)number)%10 )/10;
     584:	0f 2e       	mov	r0, r31
     586:	f4 e6       	ldi	r31, 0x64	; 100
     588:	ef 2e       	mov	r14, r31
     58a:	f1 2c       	mov	r15, r1
     58c:	f0 2d       	mov	r31, r0
     58e:	c2 01       	movw	r24, r4
     590:	b7 01       	movw	r22, r14
     592:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     596:	5c 01       	movw	r10, r24
     598:	82 1b       	sub	r24, r18
     59a:	93 0b       	sbc	r25, r19
     59c:	b6 01       	movw	r22, r12
     59e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     5a2:	d8 01       	movw	r26, r16
     5a4:	12 96       	adiw	r26, 0x02	; 2
     5a6:	6c 93       	st	X, r22
	integers[1] = ( ((int)number)%1000 - ((int)number)%100 )/100;
     5a8:	0f 2e       	mov	r0, r31
     5aa:	f8 ee       	ldi	r31, 0xE8	; 232
     5ac:	2f 2e       	mov	r2, r31
     5ae:	f3 e0       	ldi	r31, 0x03	; 3
     5b0:	3f 2e       	mov	r3, r31
     5b2:	f0 2d       	mov	r31, r0
     5b4:	c2 01       	movw	r24, r4
     5b6:	b1 01       	movw	r22, r2
     5b8:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     5bc:	9c 01       	movw	r18, r24
     5be:	8a 19       	sub	r24, r10
     5c0:	9b 09       	sbc	r25, r11
     5c2:	b7 01       	movw	r22, r14
     5c4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     5c8:	d8 01       	movw	r26, r16
     5ca:	11 96       	adiw	r26, 0x01	; 1
     5cc:	6c 93       	st	X, r22
	integers[0] = ( ((int)number)%10000 - ((int)number)%1000 )/1000;
     5ce:	c2 01       	movw	r24, r4
     5d0:	60 e1       	ldi	r22, 0x10	; 16
     5d2:	77 e2       	ldi	r23, 0x27	; 39
     5d4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     5d8:	82 1b       	sub	r24, r18
     5da:	93 0b       	sbc	r25, r19
     5dc:	b1 01       	movw	r22, r2
     5de:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     5e2:	f8 01       	movw	r30, r16
     5e4:	60 83       	st	Z, r22
	number -= (int)number;
     5e6:	b2 01       	movw	r22, r4
     5e8:	55 0c       	add	r5, r5
     5ea:	88 0b       	sbc	r24, r24
     5ec:	99 0b       	sbc	r25, r25
     5ee:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatsisf>
     5f2:	9b 01       	movw	r18, r22
     5f4:	ac 01       	movw	r20, r24
     5f6:	69 81       	ldd	r22, Y+1	; 0x01
     5f8:	7a 81       	ldd	r23, Y+2	; 0x02
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	9c 81       	ldd	r25, Y+4	; 0x04
     5fe:	0e 94 21 08 	call	0x1042	; 0x1042 <__subsf3>
	number = number* 10000;
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e4       	ldi	r19, 0x40	; 64
     606:	4c e1       	ldi	r20, 0x1C	; 28
     608:	56 e4       	ldi	r21, 0x46	; 70
     60a:	0e 94 ed 09 	call	0x13da	; 0x13da <__mulsf3>
     60e:	4b 01       	movw	r8, r22
     610:	5c 01       	movw	r10, r24

	floats[3] = (  (int)number)%10;
     612:	0e 94 05 09 	call	0x120a	; 0x120a <__fixsfsi>
     616:	fb 01       	movw	r30, r22
     618:	cb 01       	movw	r24, r22
     61a:	b6 01       	movw	r22, r12
     61c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     620:	9c 01       	movw	r18, r24
     622:	ad 81       	ldd	r26, Y+5	; 0x05
     624:	be 81       	ldd	r27, Y+6	; 0x06
     626:	13 96       	adiw	r26, 0x03	; 3
     628:	8c 93       	st	X, r24
	floats[2] = ( ((int)number)%100 - ((int)number)%10 )/10;
     62a:	cf 01       	movw	r24, r30
     62c:	b7 01       	movw	r22, r14
     62e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     632:	3c 01       	movw	r6, r24
     634:	82 1b       	sub	r24, r18
     636:	93 0b       	sbc	r25, r19
     638:	b6 01       	movw	r22, r12
     63a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     63e:	ad 81       	ldd	r26, Y+5	; 0x05
     640:	be 81       	ldd	r27, Y+6	; 0x06
     642:	12 96       	adiw	r26, 0x02	; 2
     644:	6c 93       	st	X, r22
	floats[1] = ( ((int)number)%1000 - ((int)number)%100 )/100;
     646:	cf 01       	movw	r24, r30
     648:	b1 01       	movw	r22, r2
     64a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     64e:	9c 01       	movw	r18, r24
     650:	86 19       	sub	r24, r6
     652:	97 09       	sbc	r25, r7
     654:	b7 01       	movw	r22, r14
     656:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     65a:	ad 81       	ldd	r26, Y+5	; 0x05
     65c:	be 81       	ldd	r27, Y+6	; 0x06
     65e:	11 96       	adiw	r26, 0x01	; 1
     660:	6c 93       	st	X, r22
	floats[0] = ( ((int)number)%10000 - ((int)number)%1000 )/1000;
     662:	cf 01       	movw	r24, r30
     664:	60 e1       	ldi	r22, 0x10	; 16
     666:	77 e2       	ldi	r23, 0x27	; 39
     668:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     66c:	82 1b       	sub	r24, r18
     66e:	93 0b       	sbc	r25, r19
     670:	b1 01       	movw	r22, r2
     672:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__divmodhi4>
     676:	ed 81       	ldd	r30, Y+5	; 0x05
     678:	fe 81       	ldd	r31, Y+6	; 0x06
     67a:	60 83       	st	Z, r22
	if (number<0){prints_String("-",1);}
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	c5 01       	movw	r24, r10
     684:	b4 01       	movw	r22, r8
     686:	0e 94 8e 08 	call	0x111c	; 0x111c <__cmpsf2>
     68a:	88 23       	and	r24, r24
     68c:	34 f4       	brge	.+12     	; 0x69a <double2string+0x174>
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	8a e6       	ldi	r24, 0x6A	; 106
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>



/////////////////////////////////Print double values on Serial monitor

void double2string (double number, char integers[], char floats[]){
     69a:	e1 2c       	mov	r14, r1
     69c:	f1 2c       	mov	r15, r1
     69e:	0c c0       	rjmp	.+24     	; 0x6b8 <double2string+0x192>
	floats[1] = ( ((int)number)%1000 - ((int)number)%100 )/100;
	floats[0] = ( ((int)number)%10000 - ((int)number)%1000 )/1000;
	if (number<0){prints_String("-",1);}
	for (int i=0;i<4;i++)
	{
		prints_int(integers[i],1);
     6a0:	f8 01       	movw	r30, r16
     6a2:	ee 0d       	add	r30, r14
     6a4:	ff 1d       	adc	r31, r15
     6a6:	80 81       	ld	r24, Z
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 2c 02 	call	0x458	; 0x458 <prints_int>
	floats[3] = (  (int)number)%10;
	floats[2] = ( ((int)number)%100 - ((int)number)%10 )/10;
	floats[1] = ( ((int)number)%1000 - ((int)number)%100 )/100;
	floats[0] = ( ((int)number)%10000 - ((int)number)%1000 )/1000;
	if (number<0){prints_String("-",1);}
	for (int i=0;i<4;i++)
     6b2:	ff ef       	ldi	r31, 0xFF	; 255
     6b4:	ef 1a       	sub	r14, r31
     6b6:	ff 0a       	sbc	r15, r31
     6b8:	84 e0       	ldi	r24, 0x04	; 4
     6ba:	e8 16       	cp	r14, r24
     6bc:	f1 04       	cpc	r15, r1
     6be:	84 f3       	brlt	.-32     	; 0x6a0 <double2string+0x17a>
	{
		prints_int(integers[i],1);
	}
	prints_String(".",1);
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	88 e4       	ldi	r24, 0x48	; 72
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
	for (int i=0;i<4;i++)
     6cc:	00 e0       	ldi	r16, 0x00	; 0
     6ce:	10 e0       	ldi	r17, 0x00	; 0
     6d0:	0c c0       	rjmp	.+24     	; 0x6ea <double2string+0x1c4>
	{
		prints_int(floats[i],1);
     6d2:	ed 81       	ldd	r30, Y+5	; 0x05
     6d4:	fe 81       	ldd	r31, Y+6	; 0x06
     6d6:	e0 0f       	add	r30, r16
     6d8:	f1 1f       	adc	r31, r17
     6da:	80 81       	ld	r24, Z
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 2c 02 	call	0x458	; 0x458 <prints_int>
	for (int i=0;i<4;i++)
	{
		prints_int(integers[i],1);
	}
	prints_String(".",1);
	for (int i=0;i<4;i++)
     6e6:	0f 5f       	subi	r16, 0xFF	; 255
     6e8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ea:	04 30       	cpi	r16, 0x04	; 4
     6ec:	11 05       	cpc	r17, r1
     6ee:	8c f3       	brlt	.-30     	; 0x6d2 <double2string+0x1ac>
	{
		prints_int(floats[i],1);
	}
	
}
     6f0:	26 96       	adiw	r28, 0x06	; 6
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	bf 90       	pop	r11
     70e:	af 90       	pop	r10
     710:	9f 90       	pop	r9
     712:	8f 90       	pop	r8
     714:	7f 90       	pop	r7
     716:	6f 90       	pop	r6
     718:	5f 90       	pop	r5
     71a:	4f 90       	pop	r4
     71c:	3f 90       	pop	r3
     71e:	2f 90       	pop	r2
     720:	08 95       	ret

00000722 <print_q>:


char integers[];
char floats[];
////////////////////////////////////Print Q matrix////////////////////////
void print_q(){
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
	PORTC=0x01; // for buzzer indication start 
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	88 b9       	out	0x08, r24	; 8
     72e:	2f e3       	ldi	r18, 0x3F	; 63
     730:	8d e0       	ldi	r24, 0x0D	; 13
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	21 50       	subi	r18, 0x01	; 1
     736:	80 40       	sbci	r24, 0x00	; 0
     738:	90 40       	sbci	r25, 0x00	; 0
     73a:	e1 f7       	brne	.-8      	; 0x734 <print_q+0x12>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <print_q+0x1c>
     73e:	00 00       	nop
	_delay_ms(1000);
	PORTC=0x00; // for buzzer indication stop
     740:	18 b8       	out	0x08, r1	; 8
	prints_String("\n",2);
     742:	62 e0       	ldi	r22, 0x02	; 2
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	8a e4       	ldi	r24, 0x4A	; 74
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
	prints_String("-------------------------------",30);
     74e:	6e e1       	ldi	r22, 0x1E	; 30
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	8c e4       	ldi	r24, 0x4C	; 76
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
	prints_String("\n",2);
     75a:	62 e0       	ldi	r22, 0x02	; 2
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	8a e4       	ldi	r24, 0x4A	; 74
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
	prints_String("--TrainingFinsihStartTesting--",30);
     766:	6e e1       	ldi	r22, 0x1E	; 30
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	8c e6       	ldi	r24, 0x6C	; 108
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
	prints_String("\n",2);
     772:	62 e0       	ldi	r22, 0x02	; 2
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	8a e4       	ldi	r24, 0x4A	; 74
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
	prints_String("-------------------------------",30);
     77e:	6e e1       	ldi	r22, 0x1E	; 30
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	8c e4       	ldi	r24, 0x4C	; 76
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
	prints_String("\n",2);
     78a:	62 e0       	ldi	r22, 0x02	; 2
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	8a e4       	ldi	r24, 0x4A	; 74
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
	for(int i=0;i<4;i++){
     796:	00 e0       	ldi	r16, 0x00	; 0
     798:	10 e0       	ldi	r17, 0x00	; 0
     79a:	43 c0       	rjmp	.+134    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		prints_String("S",1);
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	8b e8       	ldi	r24, 0x8B	; 139
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
		prints_int(i,1);
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	c8 01       	movw	r24, r16
     7ae:	0e 94 2c 02 	call	0x458	; 0x458 <prints_int>
		prints_String("--------------------",21);
     7b2:	65 e1       	ldi	r22, 0x15	; 21
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	87 e5       	ldi	r24, 0x57	; 87
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
		prints_String("\n",2);
     7be:	62 e0       	ldi	r22, 0x02	; 2
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	8a e4       	ldi	r24, 0x4A	; 74
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
		for(int j=0;j<3;j++){
     7ca:	c0 e0       	ldi	r28, 0x00	; 0
     7cc:	d0 e0       	ldi	r29, 0x00	; 0
     7ce:	1e c0       	rjmp	.+60     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			//int temp =(int)Q_Matrix[i][j]*100;
			double2string(Q_Matrix[i][j],integers,floats);
     7d0:	f8 01       	movw	r30, r16
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	e0 0f       	add	r30, r16
     7d8:	f1 1f       	adc	r31, r17
     7da:	ec 0f       	add	r30, r28
     7dc:	fd 1f       	adc	r31, r29
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	ea 5d       	subi	r30, 0xDA	; 218
     7e8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ea:	60 81       	ld	r22, Z
     7ec:	71 81       	ldd	r23, Z+1	; 0x01
     7ee:	82 81       	ldd	r24, Z+2	; 0x02
     7f0:	93 81       	ldd	r25, Z+3	; 0x03
     7f2:	2a e8       	ldi	r18, 0x8A	; 138
     7f4:	32 e0       	ldi	r19, 0x02	; 2
     7f6:	4f e9       	ldi	r20, 0x9F	; 159
     7f8:	52 e0       	ldi	r21, 0x02	; 2
     7fa:	0e 94 93 02 	call	0x526	; 0x526 <double2string>
			prints_String(" ",1);
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	8d e8       	ldi	r24, 0x8D	; 141
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
	for(int i=0;i<4;i++){
		prints_String("S",1);
		prints_int(i,1);
		prints_String("--------------------",21);
		prints_String("\n",2);
		for(int j=0;j<3;j++){
     80a:	21 96       	adiw	r28, 0x01	; 1
     80c:	c3 30       	cpi	r28, 0x03	; 3
     80e:	d1 05       	cpc	r29, r1
     810:	fc f2       	brlt	.-66     	; 0x7d0 <print_q+0xae>
			//int temp =(int)Q_Matrix[i][j]*100;
			double2string(Q_Matrix[i][j],integers,floats);
			prints_String(" ",1);
		}
		prints_String("\n",2);
     812:	62 e0       	ldi	r22, 0x02	; 2
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	8a e4       	ldi	r24, 0x4A	; 74
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
	prints_String("\n",2);
	prints_String("--TrainingFinsihStartTesting--",30);
	prints_String("\n",2);
	prints_String("-------------------------------",30);
	prints_String("\n",2);
	for(int i=0;i<4;i++){
     81e:	0f 5f       	subi	r16, 0xFF	; 255
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	04 30       	cpi	r16, 0x04	; 4
     824:	11 05       	cpc	r17, r1
     826:	0c f4       	brge	.+2      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     828:	b9 cf       	rjmp	.-142    	; 0x79c <print_q+0x7a>
			double2string(Q_Matrix[i][j],integers,floats);
			prints_String(" ",1);
		}
		prints_String("\n",2);
	 }
	}	
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	08 95       	ret

00000834 <main>:



int main(void)
{   
	DDRC=0xff; // Make port Pin 0 in Portc output to connect buzzer to it (We use buzzer to now that robot is starts Testing) 
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	87 b9       	out	0x07, r24	; 7
	Pwm_Generation_Left_Intilaization();  //Initialize the PWM of left motor
     838:	0e 94 72 05 	call	0xae4	; 0xae4 <Pwm_Generation_Left_Intilaization>
	Pwm_Generation_Right_Intilaization(); //Initialize the PWM of right motor 
     83c:	0e 94 68 05 	call	0xad0	; 0xad0 <Pwm_Generation_Right_Intilaization>
	ultrasonic_init_1(); // Initialize ultrasonic 1 
     840:	0e 94 35 06 	call	0xc6a	; 0xc6a <ultrasonic_init_1>
	ultrasonic_init_2();// Initialize ultrasonic 2
     844:	0e 94 49 06 	call	0xc92	; 0xc92 <ultrasonic_init_2>
	Move_Intilaization();// Initialize the motors 
     848:	0e 94 9c 05 	call	0xb38	; 0xb38 <Move_Intilaization>
	Serial_monitor_int(); // Initialize the serial monitor 
     84c:	0e 94 09 06 	call	0xc12	; 0xc12 <Serial_monitor_int>
	sei(); 
     850:	78 94       	sei
	seed_init(); //Initialize 
     852:	0e 94 7a 00 	call	0xf4	; 0xf4 <seed_init>
	int episode_count=100;
    while (1) 
    {  
		  
		 ///////////////////training/////////////////////////////////////////////
 		for(int episodes=0;episodes<episode_count;episodes++) 
     856:	61 2c       	mov	r6, r1
     858:	71 2c       	mov	r7, r1
     85a:	13 c1       	rjmp	.+550    	; 0xa82 <__stack+0x183>
 		{   
		   //Print Number Of episode 
			prints_String("------------------------Episode=",28);
     85c:	6c e1       	ldi	r22, 0x1C	; 28
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	8f e8       	ldi	r24, 0x8F	; 143
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
			prints_int(episodes,2);
     868:	62 e0       	ldi	r22, 0x02	; 2
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	c3 01       	movw	r24, r6
     86e:	0e 94 2c 02 	call	0x458	; 0x458 <prints_int>
			prints_String("\n",2);
     872:	62 e0       	ldi	r22, 0x02	; 2
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	8a e4       	ldi	r24, 0x4A	; 74
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
			/// get current state and print
			int state;
			state=sensor_reading(); // 01
     87e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <sensor_reading>
     882:	ec 01       	movw	r28, r24
			prints_String("State=",6);
     884:	66 e0       	ldi	r22, 0x06	; 6
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	8e e1       	ldi	r24, 0x1E	; 30
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
			prints_int(state,1);
     890:	61 e0       	ldi	r22, 0x01	; 1
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	ce 01       	movw	r24, r28
     896:	0e 94 2c 02 	call	0x458	; 0x458 <prints_int>
			prints_String("\n",2);
     89a:	62 e0       	ldi	r22, 0x02	; 2
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	8a e4       	ldi	r24, 0x4A	; 74
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
			//choose Explore or exploit and print the states
 			if(Explore_Exploit()==true){ //true Explore 
     8a6:	0e 94 ad 00 	call	0x15a	; 0x15a <Explore_Exploit>
     8aa:	88 23       	and	r24, r24
     8ac:	39 f1       	breq	.+78     	; 0x8fc <main+0xc8>
				  prints_String("EXPLORE----------",17);
     8ae:	61 e1       	ldi	r22, 0x11	; 17
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	80 eb       	ldi	r24, 0xB0	; 176
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
				  prints_String("\n",2);
     8ba:	62 e0       	ldi	r22, 0x02	; 2
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	8a e4       	ldi	r24, 0x4A	; 74
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
				  action_taken=rand_Action(); //Choosee Random Action 
     8c6:	0e 94 cf 00 	call	0x19e	; 0x19e <rand_Action>
     8ca:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <action_taken+0x1>
     8ce:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <action_taken>
				  prints_String("ActionTaken=",12);
     8d2:	6c e0       	ldi	r22, 0x0C	; 12
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	82 ec       	ldi	r24, 0xC2	; 194
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
				  prints_int(action_taken,1);
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <action_taken>
     8e6:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <action_taken+0x1>
     8ea:	0e 94 2c 02 	call	0x458	; 0x458 <prints_int>
				  prints_String("\n",2);
     8ee:	62 e0       	ldi	r22, 0x02	; 2
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	8a e4       	ldi	r24, 0x4A	; 74
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
     8fa:	29 c0       	rjmp	.+82     	; 0x94e <__stack+0x4f>
				  }
			 else { //False Exploit
				  prints_String("EXPLOIT----------",17);
     8fc:	61 e1       	ldi	r22, 0x11	; 17
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	8f ec       	ldi	r24, 0xCF	; 207
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
				  prints_String("\n",2);
     908:	62 e0       	ldi	r22, 0x02	; 2
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	8a e4       	ldi	r24, 0x4A	; 74
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
				  action_taken=MAX_Action_InState(state); //Takes Max action In State
     914:	ce 01       	movw	r24, r28
     916:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <MAX_Action_InState>
     91a:	0e 94 05 09 	call	0x120a	; 0x120a <__fixsfsi>
     91e:	70 93 8c 02 	sts	0x028C, r23	; 0x80028c <action_taken+0x1>
     922:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <action_taken>
				  prints_String("ActionTaken=",12);
     926:	6c e0       	ldi	r22, 0x0C	; 12
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	82 ec       	ldi	r24, 0xC2	; 194
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
				  prints_int(action_taken,1);
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <action_taken>
     93a:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <action_taken+0x1>
     93e:	0e 94 2c 02 	call	0x458	; 0x458 <prints_int>
				  prints_String("\n",2);
     942:	62 e0       	ldi	r22, 0x02	; 2
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	8a e4       	ldi	r24, 0x4A	; 74
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
				   }
			//Done Action until state changes 
             do{
				  prints_String("INDOWHILE----------",19);
     94e:	63 e1       	ldi	r22, 0x13	; 19
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	81 ee       	ldi	r24, 0xE1	; 225
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
				  prints_String("\n",2);
     95a:	62 e0       	ldi	r22, 0x02	; 2
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	8a e4       	ldi	r24, 0x4A	; 74
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
	              Action_Done(action_taken);//Done Action until state changes 
     966:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <action_taken>
     96a:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <action_taken+0x1>
     96e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Action_Done>
				prints_String("ActionTaken=",12);
     972:	6c e0       	ldi	r22, 0x0C	; 12
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	82 ec       	ldi	r24, 0xC2	; 194
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
				prints_int(action_taken,1);
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <action_taken>
     986:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <action_taken+0x1>
     98a:	0e 94 2c 02 	call	0x458	; 0x458 <prints_int>
				prints_String("\n",2);
     98e:	62 e0       	ldi	r22, 0x02	; 2
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	8a e4       	ldi	r24, 0x4A	; 74
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
             }while(sensor_reading()==state);
     99a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <sensor_reading>
     99e:	c8 17       	cp	r28, r24
     9a0:	d9 07       	cpc	r29, r25
     9a2:	a9 f2       	breq	.-86     	; 0x94e <__stack+0x4f>
			 //Update new Q ------------------------------------
			 prints_String("OUTWHILE----------",18);
     9a4:	62 e1       	ldi	r22, 0x12	; 18
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	85 ef       	ldi	r24, 0xF5	; 245
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
			 prints_String("\n",2);
     9b0:	62 e0       	ldi	r22, 0x02	; 2
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	8a e4       	ldi	r24, 0x4A	; 74
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
             Action_Done(3); // Stop car to can read the states
     9bc:	83 e0       	ldi	r24, 0x03	; 3
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Action_Done>
			 prints_String("STOPPPPP----------",18);
     9c4:	62 e1       	ldi	r22, 0x12	; 18
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
			 prints_String("\n",2);
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	8a e4       	ldi	r24, 0x4A	; 74
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
             Next_state=sensor_reading();// Read new state
     9dc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <sensor_reading>
     9e0:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <Next_state+0x1>
     9e4:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <Next_state>
			 prints_String("NEWState=",9);
     9e8:	69 e0       	ldi	r22, 0x09	; 9
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	8b e1       	ldi	r24, 0x1B	; 27
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
			 prints_int(Next_state,1);
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <Next_state>
     9fc:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <Next_state+0x1>
     a00:	0e 94 2c 02 	call	0x458	; 0x458 <prints_int>
			 prints_String("\n",2);
     a04:	62 e0       	ldi	r22, 0x02	; 2
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	8a e4       	ldi	r24, 0x4A	; 74
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <prints_String>
             Reward_gain=Reward_Martix[state][action_taken];//get reward gained of last action 
     a10:	40 91 8b 02 	lds	r20, 0x028B	; 0x80028b <action_taken>
     a14:	50 91 8c 02 	lds	r21, 0x028C	; 0x80028c <action_taken+0x1>
     a18:	fe 01       	movw	r30, r28
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	ec 0f       	add	r30, r28
     a20:	fd 1f       	adc	r31, r29
     a22:	e4 0f       	add	r30, r20
     a24:	f5 1f       	adc	r31, r21
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	ee 0f       	add	r30, r30
     a2c:	ff 1f       	adc	r31, r31
     a2e:	ec 5f       	subi	r30, 0xFC	; 252
     a30:	fe 4f       	sbci	r31, 0xFE	; 254
     a32:	00 81       	ld	r16, Z
     a34:	11 81       	ldd	r17, Z+1	; 0x01
     a36:	22 81       	ldd	r18, Z+2	; 0x02
     a38:	33 81       	ldd	r19, Z+3	; 0x03
     a3a:	00 93 97 02 	sts	0x0297, r16	; 0x800297 <Reward_gain>
     a3e:	10 93 98 02 	sts	0x0298, r17	; 0x800298 <Reward_gain+0x1>
     a42:	20 93 99 02 	sts	0x0299, r18	; 0x800299 <Reward_gain+0x2>
     a46:	30 93 9a 02 	sts	0x029A, r19	; 0x80029a <Reward_gain+0x3>
             Update(state,Next_state,action_taken,Reward_gain,learning_rate,discount_factor);//update Q  
     a4a:	80 90 34 01 	lds	r8, 0x0134	; 0x800134 <discount_factor>
     a4e:	90 90 35 01 	lds	r9, 0x0135	; 0x800135 <discount_factor+0x1>
     a52:	a0 90 36 01 	lds	r10, 0x0136	; 0x800136 <discount_factor+0x2>
     a56:	b0 90 37 01 	lds	r11, 0x0137	; 0x800137 <discount_factor+0x3>
     a5a:	c0 90 38 01 	lds	r12, 0x0138	; 0x800138 <learning_rate>
     a5e:	d0 90 39 01 	lds	r13, 0x0139	; 0x800139 <learning_rate+0x1>
     a62:	e0 90 3a 01 	lds	r14, 0x013A	; 0x80013a <learning_rate+0x2>
     a66:	f0 90 3b 01 	lds	r15, 0x013B	; 0x80013b <learning_rate+0x3>
     a6a:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <Next_state>
     a6e:	70 91 92 02 	lds	r23, 0x0292	; 0x800292 <Next_state+0x1>
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 3f 01 	call	0x27e	; 0x27e <Update>
             update_epsilon();//Update epsilon (Decay it)
     a78:	0e 94 96 00 	call	0x12c	; 0x12c <update_epsilon>
	int episode_count=100;
    while (1) 
    {  
		  
		 ///////////////////training/////////////////////////////////////////////
 		for(int episodes=0;episodes<episode_count;episodes++) 
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	68 1a       	sub	r6, r24
     a80:	78 0a       	sbc	r7, r24
     a82:	84 e6       	ldi	r24, 0x64	; 100
     a84:	68 16       	cp	r6, r24
     a86:	71 04       	cpc	r7, r1
     a88:	0c f4       	brge	.+2      	; 0xa8c <__stack+0x18d>
     a8a:	e8 ce       	rjmp	.-560    	; 0x85c <main+0x28>
             Update(state,Next_state,action_taken,Reward_gain,learning_rate,discount_factor);//update Q  
             update_epsilon();//Update epsilon (Decay it)
			 
 		}
		//To show Q Values after training 
		print_q();
     a8c:	0e 94 91 03 	call	0x722	; 0x722 <print_q>
		Serial_print('\n');
     a90:	8a e0       	ldi	r24, 0x0A	; 10
     a92:	0e 94 16 06 	call	0xc2c	; 0xc2c <Serial_print>
		///////////////////testing/////////////////////////////////////////////
	while(1){
	     	Serial_print('\n');
     a96:	8a e0       	ldi	r24, 0x0A	; 10
     a98:	0e 94 16 06 	call	0xc2c	; 0xc2c <Serial_print>
		    Serial_print('\n');
     a9c:	8a e0       	ldi	r24, 0x0A	; 10
     a9e:	0e 94 16 06 	call	0xc2c	; 0xc2c <Serial_print>
			int state;
			state=sensor_reading();
     aa2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <sensor_reading>
     aa6:	ec 01       	movw	r28, r24
			do{
			    action_taken=MAX_Action_InState(state);
     aa8:	ce 01       	movw	r24, r28
     aaa:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <MAX_Action_InState>
     aae:	0e 94 05 09 	call	0x120a	; 0x120a <__fixsfsi>
     ab2:	70 93 8c 02 	sts	0x028C, r23	; 0x80028c <action_taken+0x1>
     ab6:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <action_taken>
				Action_Done(action_taken);
     aba:	cb 01       	movw	r24, r22
     abc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Action_Done>
			}while(sensor_reading()==state);
     ac0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <sensor_reading>
     ac4:	c8 17       	cp	r28, r24
     ac6:	d9 07       	cpc	r29, r25
     ac8:	79 f3       	breq	.-34     	; 0xaa8 <__stack+0x1a9>
			Stop();//stop car
     aca:	0e 94 04 06 	call	0xc08	; 0xc08 <Stop>
        } 		
     ace:	e3 cf       	rjmp	.-58     	; 0xa96 <__stack+0x197>

00000ad0 <Pwm_Generation_Right_Intilaization>:
     ad0:	8a b1       	in	r24, 0x0a	; 10
     ad2:	80 64       	ori	r24, 0x40	; 64
     ad4:	8a b9       	out	0x0a, r24	; 10
     ad6:	84 b5       	in	r24, 0x24	; 36
     ad8:	83 68       	ori	r24, 0x83	; 131
     ada:	84 bd       	out	0x24, r24	; 36
     adc:	85 b5       	in	r24, 0x25	; 37
     ade:	81 60       	ori	r24, 0x01	; 1
     ae0:	85 bd       	out	0x25, r24	; 37
     ae2:	08 95       	ret

00000ae4 <Pwm_Generation_Left_Intilaization>:
     ae4:	8a b1       	in	r24, 0x0a	; 10
     ae6:	80 62       	ori	r24, 0x20	; 32
     ae8:	8a b9       	out	0x0a, r24	; 10
     aea:	84 b5       	in	r24, 0x24	; 36
     aec:	83 62       	ori	r24, 0x23	; 35
     aee:	84 bd       	out	0x24, r24	; 36
     af0:	85 b5       	in	r24, 0x25	; 37
     af2:	81 60       	ori	r24, 0x01	; 1
     af4:	85 bd       	out	0x25, r24	; 37
     af6:	08 95       	ret

00000af8 <Pwm_Generation_Right>:
     af8:	68 2f       	mov	r22, r24
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatsisf>
     b04:	23 e3       	ldi	r18, 0x33	; 51
     b06:	33 e3       	ldi	r19, 0x33	; 51
     b08:	43 e2       	ldi	r20, 0x23	; 35
     b0a:	50 e4       	ldi	r21, 0x40	; 64
     b0c:	0e 94 ed 09 	call	0x13da	; 0x13da <__mulsf3>
     b10:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fixunssfsi>
     b14:	67 bd       	out	0x27, r22	; 39
     b16:	08 95       	ret

00000b18 <Pwm_Generation_Left>:
     b18:	68 2f       	mov	r22, r24
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatsisf>
     b24:	23 e3       	ldi	r18, 0x33	; 51
     b26:	33 e3       	ldi	r19, 0x33	; 51
     b28:	43 e2       	ldi	r20, 0x23	; 35
     b2a:	50 e4       	ldi	r21, 0x40	; 64
     b2c:	0e 94 ed 09 	call	0x13da	; 0x13da <__mulsf3>
     b30:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fixunssfsi>
     b34:	68 bd       	out	0x28, r22	; 40
     b36:	08 95       	ret

00000b38 <Move_Intilaization>:
     b38:	84 b1       	in	r24, 0x04	; 4
     b3a:	8f 60       	ori	r24, 0x0F	; 15
     b3c:	84 b9       	out	0x04, r24	; 4
     b3e:	08 95       	ret

00000b40 <Move_Car>:
     b40:	cf 93       	push	r28
     b42:	c6 2f       	mov	r28, r22
     b44:	95 b1       	in	r25, 0x05	; 5
     b46:	90 7f       	andi	r25, 0xF0	; 240
     b48:	e8 2f       	mov	r30, r24
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	e0 5c       	subi	r30, 0xC0	; 192
     b4e:	fe 4f       	sbci	r31, 0xFE	; 254
     b50:	20 81       	ld	r18, Z
     b52:	92 2b       	or	r25, r18
     b54:	95 b9       	out	0x05, r25	; 5
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	38 f4       	brcc	.+14     	; 0xb68 <Move_Car+0x28>
     b5a:	86 2f       	mov	r24, r22
     b5c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <Pwm_Generation_Right>
     b60:	8c 2f       	mov	r24, r28
     b62:	0e 94 8c 05 	call	0xb18	; 0xb18 <Pwm_Generation_Left>
     b66:	18 c0       	rjmp	.+48     	; 0xb98 <Move_Car+0x58>
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	39 f4       	brne	.+14     	; 0xb7a <Move_Car+0x3a>
     b6c:	86 2f       	mov	r24, r22
     b6e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <Pwm_Generation_Right>
     b72:	8c 2f       	mov	r24, r28
     b74:	0e 94 8c 05 	call	0xb18	; 0xb18 <Pwm_Generation_Left>
     b78:	0f c0       	rjmp	.+30     	; 0xb98 <Move_Car+0x58>
     b7a:	83 30       	cpi	r24, 0x03	; 3
     b7c:	39 f4       	brne	.+14     	; 0xb8c <Move_Car+0x4c>
     b7e:	86 2f       	mov	r24, r22
     b80:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <Pwm_Generation_Right>
     b84:	8c 2f       	mov	r24, r28
     b86:	0e 94 8c 05 	call	0xb18	; 0xb18 <Pwm_Generation_Left>
     b8a:	06 c0       	rjmp	.+12     	; 0xb98 <Move_Car+0x58>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <Pwm_Generation_Right>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	0e 94 8c 05 	call	0xb18	; 0xb18 <Pwm_Generation_Left>
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <Move_Right>:
     b9c:	67 e3       	ldi	r22, 0x37	; 55
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	0e 94 a0 05 	call	0xb40	; 0xb40 <Move_Car>
     ba4:	2f e7       	ldi	r18, 0x7F	; 127
     ba6:	8a e1       	ldi	r24, 0x1A	; 26
     ba8:	96 e0       	ldi	r25, 0x06	; 6
     baa:	21 50       	subi	r18, 0x01	; 1
     bac:	80 40       	sbci	r24, 0x00	; 0
     bae:	90 40       	sbci	r25, 0x00	; 0
     bb0:	e1 f7       	brne	.-8      	; 0xbaa <Move_Right+0xe>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <Move_Right+0x18>
     bb4:	00 00       	nop
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	0e 94 a0 05 	call	0xb40	; 0xb40 <Move_Car>
     bbe:	08 95       	ret

00000bc0 <Move_Left>:
     bc0:	67 e3       	ldi	r22, 0x37	; 55
     bc2:	83 e0       	ldi	r24, 0x03	; 3
     bc4:	0e 94 a0 05 	call	0xb40	; 0xb40 <Move_Car>
     bc8:	2f e7       	ldi	r18, 0x7F	; 127
     bca:	8a e1       	ldi	r24, 0x1A	; 26
     bcc:	96 e0       	ldi	r25, 0x06	; 6
     bce:	21 50       	subi	r18, 0x01	; 1
     bd0:	80 40       	sbci	r24, 0x00	; 0
     bd2:	90 40       	sbci	r25, 0x00	; 0
     bd4:	e1 f7       	brne	.-8      	; 0xbce <Move_Left+0xe>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <Move_Left+0x18>
     bd8:	00 00       	nop
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	84 e0       	ldi	r24, 0x04	; 4
     bde:	0e 94 a0 05 	call	0xb40	; 0xb40 <Move_Car>
     be2:	08 95       	ret

00000be4 <Move_Forward>:
     be4:	67 e3       	ldi	r22, 0x37	; 55
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	0e 94 a0 05 	call	0xb40	; 0xb40 <Move_Car>
     bec:	2f e7       	ldi	r18, 0x7F	; 127
     bee:	8a e1       	ldi	r24, 0x1A	; 26
     bf0:	96 e0       	ldi	r25, 0x06	; 6
     bf2:	21 50       	subi	r18, 0x01	; 1
     bf4:	80 40       	sbci	r24, 0x00	; 0
     bf6:	90 40       	sbci	r25, 0x00	; 0
     bf8:	e1 f7       	brne	.-8      	; 0xbf2 <Move_Forward+0xe>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <Move_Forward+0x18>
     bfc:	00 00       	nop
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	0e 94 a0 05 	call	0xb40	; 0xb40 <Move_Car>
     c06:	08 95       	ret

00000c08 <Stop>:
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	84 e0       	ldi	r24, 0x04	; 4
     c0c:	0e 94 a0 05 	call	0xb40	; 0xb40 <Move_Car>
     c10:	08 95       	ret

00000c12 <Serial_monitor_int>:
#define  F_CPU 160000000
#define BAUD 9600
#define BRC ((F_CPU/16/BAUD)-1)
void Serial_monitor_int()
{
	UBRR0H=(BRC>>8);
     c12:	84 e0       	ldi	r24, 0x04	; 4
     c14:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=BRC;
     c18:	80 e1       	ldi	r24, 0x10	; 16
     c1a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B=(1<<TXEN0);
     c1e:	88 e0       	ldi	r24, 0x08	; 8
     c20:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00);
     c24:	86 e0       	ldi	r24, 0x06	; 6
     c26:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     c2a:	08 95       	ret

00000c2c <Serial_print>:

}
void Serial_print(uint8_t value){
	UDR0=value;
     c2c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c30:	08 95       	ret

00000c32 <timer0_init>:
     c32:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c3c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c40:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c44:	ef e6       	ldi	r30, 0x6F	; 111
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	81 60       	ori	r24, 0x01	; 1
     c4c:	80 83       	st	Z, r24
     c4e:	08 95       	ret

00000c50 <timer2_init>:
     c50:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     c5a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     c5e:	e0 e7       	ldi	r30, 0x70	; 112
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	80 83       	st	Z, r24
     c68:	08 95       	ret

00000c6a <ultrasonic_init_1>:
     c6a:	84 b1       	in	r24, 0x04	; 4
     c6c:	80 62       	ori	r24, 0x20	; 32
     c6e:	84 b9       	out	0x04, r24	; 4
     c70:	8a b1       	in	r24, 0x0a	; 10
     c72:	8b 7f       	andi	r24, 0xFB	; 251
     c74:	8a b9       	out	0x0a, r24	; 10
     c76:	8b b1       	in	r24, 0x0b	; 11
     c78:	84 60       	ori	r24, 0x04	; 4
     c7a:	8b b9       	out	0x0b, r24	; 11
     c7c:	e9 e6       	ldi	r30, 0x69	; 105
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	81 60       	ori	r24, 0x01	; 1
     c84:	80 83       	st	Z, r24
     c86:	8d b3       	in	r24, 0x1d	; 29
     c88:	81 60       	ori	r24, 0x01	; 1
     c8a:	8d bb       	out	0x1d, r24	; 29
     c8c:	0e 94 19 06 	call	0xc32	; 0xc32 <timer0_init>
     c90:	08 95       	ret

00000c92 <ultrasonic_init_2>:
     c92:	84 b1       	in	r24, 0x04	; 4
     c94:	80 61       	ori	r24, 0x10	; 16
     c96:	84 b9       	out	0x04, r24	; 4
     c98:	8a b1       	in	r24, 0x0a	; 10
     c9a:	87 7f       	andi	r24, 0xF7	; 247
     c9c:	8a b9       	out	0x0a, r24	; 10
     c9e:	8b b1       	in	r24, 0x0b	; 11
     ca0:	88 60       	ori	r24, 0x08	; 8
     ca2:	8b b9       	out	0x0b, r24	; 11
     ca4:	e9 e6       	ldi	r30, 0x69	; 105
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	84 60       	ori	r24, 0x04	; 4
     cac:	80 83       	st	Z, r24
     cae:	8d b3       	in	r24, 0x1d	; 29
     cb0:	82 60       	ori	r24, 0x02	; 2
     cb2:	8d bb       	out	0x1d, r24	; 29
     cb4:	0e 94 28 06 	call	0xc50	; 0xc50 <timer2_init>
     cb8:	08 95       	ret

00000cba <ultra_triger_1>:
     cba:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <sensor_working_1>
     cbe:	81 11       	cpse	r24, r1
     cc0:	0c c0       	rjmp	.+24     	; 0xcda <ultra_triger_1+0x20>
     cc2:	85 b1       	in	r24, 0x05	; 5
     cc4:	80 62       	ori	r24, 0x20	; 32
     cc6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc8:	80 e5       	ldi	r24, 0x50	; 80
     cca:	8a 95       	dec	r24
     ccc:	f1 f7       	brne	.-4      	; 0xcca <ultra_triger_1+0x10>
     cce:	85 b1       	in	r24, 0x05	; 5
     cd0:	8f 7d       	andi	r24, 0xDF	; 223
     cd2:	85 b9       	out	0x05, r24	; 5
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <sensor_working_1>
     cda:	08 95       	ret

00000cdc <ultra_triger_2>:
     cdc:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <sensor_working_2>
     ce0:	81 11       	cpse	r24, r1
     ce2:	0c c0       	rjmp	.+24     	; 0xcfc <ultra_triger_2+0x20>
     ce4:	85 b1       	in	r24, 0x05	; 5
     ce6:	80 61       	ori	r24, 0x10	; 16
     ce8:	85 b9       	out	0x05, r24	; 5
     cea:	80 e5       	ldi	r24, 0x50	; 80
     cec:	8a 95       	dec	r24
     cee:	f1 f7       	brne	.-4      	; 0xcec <ultra_triger_2+0x10>
     cf0:	85 b1       	in	r24, 0x05	; 5
     cf2:	8f 7e       	andi	r24, 0xEF	; 239
     cf4:	85 b9       	out	0x05, r24	; 5
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <sensor_working_2>
     cfc:	08 95       	ret

00000cfe <__vector_1>:
     cfe:	1f 92       	push	r1
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	2f 93       	push	r18
     d0a:	3f 93       	push	r19
     d0c:	4f 93       	push	r20
     d0e:	5f 93       	push	r21
     d10:	6f 93       	push	r22
     d12:	7f 93       	push	r23
     d14:	8f 93       	push	r24
     d16:	9f 93       	push	r25
     d18:	af 93       	push	r26
     d1a:	bf 93       	push	r27
     d1c:	ef 93       	push	r30
     d1e:	ff 93       	push	r31
     d20:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <sensor_working_1>
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	09 f0       	breq	.+2      	; 0xd2a <__vector_1+0x2c>
     d28:	45 c0       	rjmp	.+138    	; 0xdb4 <__vector_1+0xb6>
     d2a:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <rising_edge_1>
     d2e:	81 11       	cpse	r24, r1
     d30:	10 c0       	rjmp	.+32     	; 0xd52 <__vector_1+0x54>
     d32:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d36:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <rising_edge_1>
     d40:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <timer_counter_1>
     d44:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <timer_counter_1+0x1>
     d48:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <timer_counter_1+0x2>
     d4c:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <timer_counter_1+0x3>
     d50:	31 c0       	rjmp	.+98     	; 0xdb4 <__vector_1+0xb6>
     d52:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <timer_counter_1>
     d56:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <timer_counter_1+0x1>
     d5a:	a0 91 5c 02 	lds	r26, 0x025C	; 0x80025c <timer_counter_1+0x2>
     d5e:	b0 91 5d 02 	lds	r27, 0x025D	; 0x80025d <timer_counter_1+0x3>
     d62:	dc 01       	movw	r26, r24
     d64:	99 27       	eor	r25, r25
     d66:	88 27       	eor	r24, r24
     d68:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d6c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d70:	bc 01       	movw	r22, r24
     d72:	cd 01       	movw	r24, r26
     d74:	62 0f       	add	r22, r18
     d76:	73 1f       	adc	r23, r19
     d78:	81 1d       	adc	r24, r1
     d7a:	91 1d       	adc	r25, r1
     d7c:	0e 94 3b 09 	call	0x1276	; 0x1276 <__floatunsisf>
     d80:	23 e3       	ldi	r18, 0x33	; 51
     d82:	33 e3       	ldi	r19, 0x33	; 51
     d84:	49 e6       	ldi	r20, 0x69	; 105
     d86:	54 e4       	ldi	r21, 0x44	; 68
     d88:	0e 94 93 08 	call	0x1126	; 0x1126 <__divsf3>
     d8c:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fixunssfsi>
     d90:	60 93 a4 02 	sts	0x02A4, r22	; 0x8002a4 <distance_1>
     d94:	70 93 a5 02 	sts	0x02A5, r23	; 0x8002a5 <distance_1+0x1>
     d98:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <distance_1+0x2>
     d9c:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <distance_1+0x3>
     da0:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <timer_counter_1>
     da4:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <timer_counter_1+0x1>
     da8:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <timer_counter_1+0x2>
     dac:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <timer_counter_1+0x3>
     db0:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <rising_edge_1>
     db4:	ff 91       	pop	r31
     db6:	ef 91       	pop	r30
     db8:	bf 91       	pop	r27
     dba:	af 91       	pop	r26
     dbc:	9f 91       	pop	r25
     dbe:	8f 91       	pop	r24
     dc0:	7f 91       	pop	r23
     dc2:	6f 91       	pop	r22
     dc4:	5f 91       	pop	r21
     dc6:	4f 91       	pop	r20
     dc8:	3f 91       	pop	r19
     dca:	2f 91       	pop	r18
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <__vector_2>:
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
     df8:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <sensor_working_2>
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	09 f0       	breq	.+2      	; 0xe02 <__vector_2+0x2c>
     e00:	42 c0       	rjmp	.+132    	; 0xe86 <__vector_2+0xb0>
     e02:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <rising_edge_2>
     e06:	81 11       	cpse	r24, r1
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <__vector_2+0x50>
     e0a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <rising_edge_2>
     e14:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <timer_counter_2>
     e18:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <timer_counter_2+0x1>
     e1c:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <timer_counter_2+0x2>
     e20:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <timer_counter_2+0x3>
     e24:	30 c0       	rjmp	.+96     	; 0xe86 <__vector_2+0xb0>
     e26:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <timer_counter_2>
     e2a:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <timer_counter_2+0x1>
     e2e:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <timer_counter_2+0x2>
     e32:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <timer_counter_2+0x3>
     e36:	ba 2f       	mov	r27, r26
     e38:	a9 2f       	mov	r26, r25
     e3a:	98 2f       	mov	r25, r24
     e3c:	88 27       	eor	r24, r24
     e3e:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     e42:	bc 01       	movw	r22, r24
     e44:	cd 01       	movw	r24, r26
     e46:	62 0f       	add	r22, r18
     e48:	71 1d       	adc	r23, r1
     e4a:	81 1d       	adc	r24, r1
     e4c:	91 1d       	adc	r25, r1
     e4e:	0e 94 3b 09 	call	0x1276	; 0x1276 <__floatunsisf>
     e52:	23 e3       	ldi	r18, 0x33	; 51
     e54:	33 e3       	ldi	r19, 0x33	; 51
     e56:	49 e6       	ldi	r20, 0x69	; 105
     e58:	54 e4       	ldi	r21, 0x44	; 68
     e5a:	0e 94 93 08 	call	0x1126	; 0x1126 <__divsf3>
     e5e:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fixunssfsi>
     e62:	60 93 a0 02 	sts	0x02A0, r22	; 0x8002a0 <distance_2>
     e66:	70 93 a1 02 	sts	0x02A1, r23	; 0x8002a1 <distance_2+0x1>
     e6a:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <distance_2+0x2>
     e6e:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <distance_2+0x3>
     e72:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <timer_counter_2>
     e76:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <timer_counter_2+0x1>
     e7a:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <timer_counter_2+0x2>
     e7e:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <timer_counter_2+0x3>
     e82:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <rising_edge_2>
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <__vector_13>:
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	2f 93       	push	r18
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <timer_counter_1>
     ec0:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <timer_counter_1+0x1>
     ec4:	a0 91 5c 02 	lds	r26, 0x025C	; 0x80025c <timer_counter_1+0x2>
     ec8:	b0 91 5d 02 	lds	r27, 0x025D	; 0x80025d <timer_counter_1+0x3>
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	a1 1d       	adc	r26, r1
     ed0:	b1 1d       	adc	r27, r1
     ed2:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <timer_counter_1>
     ed6:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <timer_counter_1+0x1>
     eda:	a0 93 5c 02 	sts	0x025C, r26	; 0x80025c <timer_counter_1+0x2>
     ede:	b0 93 5d 02 	sts	0x025D, r27	; 0x80025d <timer_counter_1+0x3>
     ee2:	8b 3d       	cpi	r24, 0xDB	; 219
     ee4:	92 40       	sbci	r25, 0x02	; 2
     ee6:	a1 05       	cpc	r26, r1
     ee8:	b1 05       	cpc	r27, r1
     eea:	80 f0       	brcs	.+32     	; 0xf0c <__vector_13+0x64>
     eec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     ef0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     ef4:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <sensor_working_1>
     ef8:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <rising_edge_1>
     efc:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <timer_counter_1>
     f00:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <timer_counter_1+0x1>
     f04:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <timer_counter_1+0x2>
     f08:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <timer_counter_1+0x3>
     f0c:	bf 91       	pop	r27
     f0e:	af 91       	pop	r26
     f10:	9f 91       	pop	r25
     f12:	8f 91       	pop	r24
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	0f 90       	pop	r0
     f1c:	1f 90       	pop	r1
     f1e:	18 95       	reti

00000f20 <__vector_9>:
     f20:	1f 92       	push	r1
     f22:	0f 92       	push	r0
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	0f 92       	push	r0
     f28:	11 24       	eor	r1, r1
     f2a:	2f 93       	push	r18
     f2c:	8f 93       	push	r24
     f2e:	9f 93       	push	r25
     f30:	af 93       	push	r26
     f32:	bf 93       	push	r27
     f34:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <timer_counter_2>
     f38:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <timer_counter_2+0x1>
     f3c:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <timer_counter_2+0x2>
     f40:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <timer_counter_2+0x3>
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	a1 1d       	adc	r26, r1
     f48:	b1 1d       	adc	r27, r1
     f4a:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <timer_counter_2>
     f4e:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <timer_counter_2+0x1>
     f52:	a0 93 58 02 	sts	0x0258, r26	; 0x800258 <timer_counter_2+0x2>
     f56:	b0 93 59 02 	sts	0x0259, r27	; 0x800259 <timer_counter_2+0x3>
     f5a:	8b 3d       	cpi	r24, 0xDB	; 219
     f5c:	92 40       	sbci	r25, 0x02	; 2
     f5e:	a1 05       	cpc	r26, r1
     f60:	b1 05       	cpc	r27, r1
     f62:	70 f0       	brcs	.+28     	; 0xf80 <__vector_9+0x60>
     f64:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     f68:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <sensor_working_2>
     f6c:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <rising_edge_2>
     f70:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <timer_counter_2>
     f74:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <timer_counter_2+0x1>
     f78:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <timer_counter_2+0x2>
     f7c:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <timer_counter_2+0x3>
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	2f 91       	pop	r18
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	0f 90       	pop	r0
     f90:	1f 90       	pop	r1
     f92:	18 95       	reti

00000f94 <read_ultra_1>:
     f94:	0e 94 5d 06 	call	0xcba	; 0xcba <ultra_triger_1>
     f98:	80 e5       	ldi	r24, 0x50	; 80
     f9a:	8a 95       	dec	r24
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <read_ultra_1+0x6>
     f9e:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <distance_1>
     fa2:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <distance_1+0x1>
     fa6:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <distance_1+0x2>
     faa:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <distance_1+0x3>
     fae:	08 95       	ret

00000fb0 <read_ultra_2>:
     fb0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <ultra_triger_2>
     fb4:	80 e5       	ldi	r24, 0x50	; 80
     fb6:	8a 95       	dec	r24
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <read_ultra_2+0x6>
     fba:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <distance_2>
     fbe:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <distance_2+0x1>
     fc2:	a0 91 a2 02 	lds	r26, 0x02A2	; 0x8002a2 <distance_2+0x2>
     fc6:	b0 91 a3 02 	lds	r27, 0x02A3	; 0x8002a3 <distance_2+0x3>
     fca:	08 95       	ret

00000fcc <get_states_of_ultrasonic>:
     fcc:	0e 94 ca 07 	call	0xf94	; 0xf94 <read_ultra_1>
     fd0:	45 97       	sbiw	r24, 0x15	; 21
     fd2:	24 f0       	brlt	.+8      	; 0xfdc <get_states_of_ultrasonic+0x10>
     fd4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <read_ultra_2>
     fd8:	45 97       	sbiw	r24, 0x15	; 21
     fda:	0c f5       	brge	.+66     	; 0x101e <get_states_of_ultrasonic+0x52>
     fdc:	0e 94 ca 07 	call	0xf94	; 0xf94 <read_ultra_1>
     fe0:	45 97       	sbiw	r24, 0x15	; 21
     fe2:	24 f0       	brlt	.+8      	; 0xfec <get_states_of_ultrasonic+0x20>
     fe4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <read_ultra_2>
     fe8:	44 97       	sbiw	r24, 0x14	; 20
     fea:	e4 f0       	brlt	.+56     	; 0x1024 <get_states_of_ultrasonic+0x58>
     fec:	0e 94 ca 07 	call	0xf94	; 0xf94 <read_ultra_1>
     ff0:	44 97       	sbiw	r24, 0x14	; 20
     ff2:	24 f4       	brge	.+8      	; 0xffc <get_states_of_ultrasonic+0x30>
     ff4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <read_ultra_2>
     ff8:	45 97       	sbiw	r24, 0x15	; 21
     ffa:	bc f4       	brge	.+46     	; 0x102a <get_states_of_ultrasonic+0x5e>
     ffc:	0e 94 ca 07 	call	0xf94	; 0xf94 <read_ultra_1>
    1000:	44 97       	sbiw	r24, 0x14	; 20
    1002:	24 f4       	brge	.+8      	; 0x100c <get_states_of_ultrasonic+0x40>
    1004:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <read_ultra_2>
    1008:	44 97       	sbiw	r24, 0x14	; 20
    100a:	94 f0       	brlt	.+36     	; 0x1030 <get_states_of_ultrasonic+0x64>
    100c:	0e 94 ca 07 	call	0xf94	; 0xf94 <read_ultra_1>
    1010:	0a 97       	sbiw	r24, 0x0a	; 10
    1012:	8c f0       	brlt	.+34     	; 0x1036 <get_states_of_ultrasonic+0x6a>
    1014:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <read_ultra_2>
    1018:	0a 97       	sbiw	r24, 0x0a	; 10
    101a:	84 f0       	brlt	.+32     	; 0x103c <get_states_of_ultrasonic+0x70>
    101c:	08 95       	ret
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	08 95       	ret
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	08 95       	ret
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	08 95       	ret
    1030:	83 e0       	ldi	r24, 0x03	; 3
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	08 95       	ret
    1036:	84 e0       	ldi	r24, 0x04	; 4
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	08 95       	ret
    103c:	84 e0       	ldi	r24, 0x04	; 4
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	08 95       	ret

00001042 <__subsf3>:
    1042:	50 58       	subi	r21, 0x80	; 128

00001044 <__addsf3>:
    1044:	bb 27       	eor	r27, r27
    1046:	aa 27       	eor	r26, r26
    1048:	0e 94 39 08 	call	0x1072	; 0x1072 <__addsf3x>
    104c:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_round>
    1050:	0e 94 a5 09 	call	0x134a	; 0x134a <__fp_pscA>
    1054:	38 f0       	brcs	.+14     	; 0x1064 <__addsf3+0x20>
    1056:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fp_pscB>
    105a:	20 f0       	brcs	.+8      	; 0x1064 <__addsf3+0x20>
    105c:	39 f4       	brne	.+14     	; 0x106c <__addsf3+0x28>
    105e:	9f 3f       	cpi	r25, 0xFF	; 255
    1060:	19 f4       	brne	.+6      	; 0x1068 <__addsf3+0x24>
    1062:	26 f4       	brtc	.+8      	; 0x106c <__addsf3+0x28>
    1064:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_nan>
    1068:	0e f4       	brtc	.+2      	; 0x106c <__addsf3+0x28>
    106a:	e0 95       	com	r30
    106c:	e7 fb       	bst	r30, 7
    106e:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__fp_inf>

00001072 <__addsf3x>:
    1072:	e9 2f       	mov	r30, r25
    1074:	0e 94 c4 09 	call	0x1388	; 0x1388 <__fp_split3>
    1078:	58 f3       	brcs	.-42     	; 0x1050 <__addsf3+0xc>
    107a:	ba 17       	cp	r27, r26
    107c:	62 07       	cpc	r22, r18
    107e:	73 07       	cpc	r23, r19
    1080:	84 07       	cpc	r24, r20
    1082:	95 07       	cpc	r25, r21
    1084:	20 f0       	brcs	.+8      	; 0x108e <__addsf3x+0x1c>
    1086:	79 f4       	brne	.+30     	; 0x10a6 <__addsf3x+0x34>
    1088:	a6 f5       	brtc	.+104    	; 0x10f2 <__addsf3x+0x80>
    108a:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__fp_zero>
    108e:	0e f4       	brtc	.+2      	; 0x1092 <__addsf3x+0x20>
    1090:	e0 95       	com	r30
    1092:	0b 2e       	mov	r0, r27
    1094:	ba 2f       	mov	r27, r26
    1096:	a0 2d       	mov	r26, r0
    1098:	0b 01       	movw	r0, r22
    109a:	b9 01       	movw	r22, r18
    109c:	90 01       	movw	r18, r0
    109e:	0c 01       	movw	r0, r24
    10a0:	ca 01       	movw	r24, r20
    10a2:	a0 01       	movw	r20, r0
    10a4:	11 24       	eor	r1, r1
    10a6:	ff 27       	eor	r31, r31
    10a8:	59 1b       	sub	r21, r25
    10aa:	99 f0       	breq	.+38     	; 0x10d2 <__addsf3x+0x60>
    10ac:	59 3f       	cpi	r21, 0xF9	; 249
    10ae:	50 f4       	brcc	.+20     	; 0x10c4 <__addsf3x+0x52>
    10b0:	50 3e       	cpi	r21, 0xE0	; 224
    10b2:	68 f1       	brcs	.+90     	; 0x110e <__addsf3x+0x9c>
    10b4:	1a 16       	cp	r1, r26
    10b6:	f0 40       	sbci	r31, 0x00	; 0
    10b8:	a2 2f       	mov	r26, r18
    10ba:	23 2f       	mov	r18, r19
    10bc:	34 2f       	mov	r19, r20
    10be:	44 27       	eor	r20, r20
    10c0:	58 5f       	subi	r21, 0xF8	; 248
    10c2:	f3 cf       	rjmp	.-26     	; 0x10aa <__addsf3x+0x38>
    10c4:	46 95       	lsr	r20
    10c6:	37 95       	ror	r19
    10c8:	27 95       	ror	r18
    10ca:	a7 95       	ror	r26
    10cc:	f0 40       	sbci	r31, 0x00	; 0
    10ce:	53 95       	inc	r21
    10d0:	c9 f7       	brne	.-14     	; 0x10c4 <__addsf3x+0x52>
    10d2:	7e f4       	brtc	.+30     	; 0x10f2 <__addsf3x+0x80>
    10d4:	1f 16       	cp	r1, r31
    10d6:	ba 0b       	sbc	r27, r26
    10d8:	62 0b       	sbc	r22, r18
    10da:	73 0b       	sbc	r23, r19
    10dc:	84 0b       	sbc	r24, r20
    10de:	ba f0       	brmi	.+46     	; 0x110e <__addsf3x+0x9c>
    10e0:	91 50       	subi	r25, 0x01	; 1
    10e2:	a1 f0       	breq	.+40     	; 0x110c <__addsf3x+0x9a>
    10e4:	ff 0f       	add	r31, r31
    10e6:	bb 1f       	adc	r27, r27
    10e8:	66 1f       	adc	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	c2 f7       	brpl	.-16     	; 0x10e0 <__addsf3x+0x6e>
    10f0:	0e c0       	rjmp	.+28     	; 0x110e <__addsf3x+0x9c>
    10f2:	ba 0f       	add	r27, r26
    10f4:	62 1f       	adc	r22, r18
    10f6:	73 1f       	adc	r23, r19
    10f8:	84 1f       	adc	r24, r20
    10fa:	48 f4       	brcc	.+18     	; 0x110e <__addsf3x+0x9c>
    10fc:	87 95       	ror	r24
    10fe:	77 95       	ror	r23
    1100:	67 95       	ror	r22
    1102:	b7 95       	ror	r27
    1104:	f7 95       	ror	r31
    1106:	9e 3f       	cpi	r25, 0xFE	; 254
    1108:	08 f0       	brcs	.+2      	; 0x110c <__addsf3x+0x9a>
    110a:	b0 cf       	rjmp	.-160    	; 0x106c <__addsf3+0x28>
    110c:	93 95       	inc	r25
    110e:	88 0f       	add	r24, r24
    1110:	08 f0       	brcs	.+2      	; 0x1114 <__addsf3x+0xa2>
    1112:	99 27       	eor	r25, r25
    1114:	ee 0f       	add	r30, r30
    1116:	97 95       	ror	r25
    1118:	87 95       	ror	r24
    111a:	08 95       	ret

0000111c <__cmpsf2>:
    111c:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fp_cmp>
    1120:	08 f4       	brcc	.+2      	; 0x1124 <__cmpsf2+0x8>
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	08 95       	ret

00001126 <__divsf3>:
    1126:	0e 94 a7 08 	call	0x114e	; 0x114e <__divsf3x>
    112a:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_round>
    112e:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fp_pscB>
    1132:	58 f0       	brcs	.+22     	; 0x114a <__divsf3+0x24>
    1134:	0e 94 a5 09 	call	0x134a	; 0x134a <__fp_pscA>
    1138:	40 f0       	brcs	.+16     	; 0x114a <__divsf3+0x24>
    113a:	29 f4       	brne	.+10     	; 0x1146 <__divsf3+0x20>
    113c:	5f 3f       	cpi	r21, 0xFF	; 255
    113e:	29 f0       	breq	.+10     	; 0x114a <__divsf3+0x24>
    1140:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__fp_inf>
    1144:	51 11       	cpse	r21, r1
    1146:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__fp_szero>
    114a:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_nan>

0000114e <__divsf3x>:
    114e:	0e 94 c4 09 	call	0x1388	; 0x1388 <__fp_split3>
    1152:	68 f3       	brcs	.-38     	; 0x112e <__divsf3+0x8>

00001154 <__divsf3_pse>:
    1154:	99 23       	and	r25, r25
    1156:	b1 f3       	breq	.-20     	; 0x1144 <__divsf3+0x1e>
    1158:	55 23       	and	r21, r21
    115a:	91 f3       	breq	.-28     	; 0x1140 <__divsf3+0x1a>
    115c:	95 1b       	sub	r25, r21
    115e:	55 0b       	sbc	r21, r21
    1160:	bb 27       	eor	r27, r27
    1162:	aa 27       	eor	r26, r26
    1164:	62 17       	cp	r22, r18
    1166:	73 07       	cpc	r23, r19
    1168:	84 07       	cpc	r24, r20
    116a:	38 f0       	brcs	.+14     	; 0x117a <__divsf3_pse+0x26>
    116c:	9f 5f       	subi	r25, 0xFF	; 255
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	22 0f       	add	r18, r18
    1172:	33 1f       	adc	r19, r19
    1174:	44 1f       	adc	r20, r20
    1176:	aa 1f       	adc	r26, r26
    1178:	a9 f3       	breq	.-22     	; 0x1164 <__divsf3_pse+0x10>
    117a:	35 d0       	rcall	.+106    	; 0x11e6 <__divsf3_pse+0x92>
    117c:	0e 2e       	mov	r0, r30
    117e:	3a f0       	brmi	.+14     	; 0x118e <__divsf3_pse+0x3a>
    1180:	e0 e8       	ldi	r30, 0x80	; 128
    1182:	32 d0       	rcall	.+100    	; 0x11e8 <__divsf3_pse+0x94>
    1184:	91 50       	subi	r25, 0x01	; 1
    1186:	50 40       	sbci	r21, 0x00	; 0
    1188:	e6 95       	lsr	r30
    118a:	00 1c       	adc	r0, r0
    118c:	ca f7       	brpl	.-14     	; 0x1180 <__divsf3_pse+0x2c>
    118e:	2b d0       	rcall	.+86     	; 0x11e6 <__divsf3_pse+0x92>
    1190:	fe 2f       	mov	r31, r30
    1192:	29 d0       	rcall	.+82     	; 0x11e6 <__divsf3_pse+0x92>
    1194:	66 0f       	add	r22, r22
    1196:	77 1f       	adc	r23, r23
    1198:	88 1f       	adc	r24, r24
    119a:	bb 1f       	adc	r27, r27
    119c:	26 17       	cp	r18, r22
    119e:	37 07       	cpc	r19, r23
    11a0:	48 07       	cpc	r20, r24
    11a2:	ab 07       	cpc	r26, r27
    11a4:	b0 e8       	ldi	r27, 0x80	; 128
    11a6:	09 f0       	breq	.+2      	; 0x11aa <__divsf3_pse+0x56>
    11a8:	bb 0b       	sbc	r27, r27
    11aa:	80 2d       	mov	r24, r0
    11ac:	bf 01       	movw	r22, r30
    11ae:	ff 27       	eor	r31, r31
    11b0:	93 58       	subi	r25, 0x83	; 131
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	3a f0       	brmi	.+14     	; 0x11c4 <__divsf3_pse+0x70>
    11b6:	9e 3f       	cpi	r25, 0xFE	; 254
    11b8:	51 05       	cpc	r21, r1
    11ba:	78 f0       	brcs	.+30     	; 0x11da <__divsf3_pse+0x86>
    11bc:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__fp_inf>
    11c0:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__fp_szero>
    11c4:	5f 3f       	cpi	r21, 0xFF	; 255
    11c6:	e4 f3       	brlt	.-8      	; 0x11c0 <__divsf3_pse+0x6c>
    11c8:	98 3e       	cpi	r25, 0xE8	; 232
    11ca:	d4 f3       	brlt	.-12     	; 0x11c0 <__divsf3_pse+0x6c>
    11cc:	86 95       	lsr	r24
    11ce:	77 95       	ror	r23
    11d0:	67 95       	ror	r22
    11d2:	b7 95       	ror	r27
    11d4:	f7 95       	ror	r31
    11d6:	9f 5f       	subi	r25, 0xFF	; 255
    11d8:	c9 f7       	brne	.-14     	; 0x11cc <__divsf3_pse+0x78>
    11da:	88 0f       	add	r24, r24
    11dc:	91 1d       	adc	r25, r1
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	97 f9       	bld	r25, 7
    11e4:	08 95       	ret
    11e6:	e1 e0       	ldi	r30, 0x01	; 1
    11e8:	66 0f       	add	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	88 1f       	adc	r24, r24
    11ee:	bb 1f       	adc	r27, r27
    11f0:	62 17       	cp	r22, r18
    11f2:	73 07       	cpc	r23, r19
    11f4:	84 07       	cpc	r24, r20
    11f6:	ba 07       	cpc	r27, r26
    11f8:	20 f0       	brcs	.+8      	; 0x1202 <__divsf3_pse+0xae>
    11fa:	62 1b       	sub	r22, r18
    11fc:	73 0b       	sbc	r23, r19
    11fe:	84 0b       	sbc	r24, r20
    1200:	ba 0b       	sbc	r27, r26
    1202:	ee 1f       	adc	r30, r30
    1204:	88 f7       	brcc	.-30     	; 0x11e8 <__divsf3_pse+0x94>
    1206:	e0 95       	com	r30
    1208:	08 95       	ret

0000120a <__fixsfsi>:
    120a:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fixunssfsi>
    120e:	68 94       	set
    1210:	b1 11       	cpse	r27, r1
    1212:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__fp_szero>
    1216:	08 95       	ret

00001218 <__fixunssfsi>:
    1218:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fp_splitA>
    121c:	88 f0       	brcs	.+34     	; 0x1240 <__fixunssfsi+0x28>
    121e:	9f 57       	subi	r25, 0x7F	; 127
    1220:	98 f0       	brcs	.+38     	; 0x1248 <__fixunssfsi+0x30>
    1222:	b9 2f       	mov	r27, r25
    1224:	99 27       	eor	r25, r25
    1226:	b7 51       	subi	r27, 0x17	; 23
    1228:	b0 f0       	brcs	.+44     	; 0x1256 <__fixunssfsi+0x3e>
    122a:	e1 f0       	breq	.+56     	; 0x1264 <__fixunssfsi+0x4c>
    122c:	66 0f       	add	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	88 1f       	adc	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	1a f0       	brmi	.+6      	; 0x123c <__fixunssfsi+0x24>
    1236:	ba 95       	dec	r27
    1238:	c9 f7       	brne	.-14     	; 0x122c <__fixunssfsi+0x14>
    123a:	14 c0       	rjmp	.+40     	; 0x1264 <__fixunssfsi+0x4c>
    123c:	b1 30       	cpi	r27, 0x01	; 1
    123e:	91 f0       	breq	.+36     	; 0x1264 <__fixunssfsi+0x4c>
    1240:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_zero>
    1244:	b1 e0       	ldi	r27, 0x01	; 1
    1246:	08 95       	ret
    1248:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__fp_zero>
    124c:	67 2f       	mov	r22, r23
    124e:	78 2f       	mov	r23, r24
    1250:	88 27       	eor	r24, r24
    1252:	b8 5f       	subi	r27, 0xF8	; 248
    1254:	39 f0       	breq	.+14     	; 0x1264 <__fixunssfsi+0x4c>
    1256:	b9 3f       	cpi	r27, 0xF9	; 249
    1258:	cc f3       	brlt	.-14     	; 0x124c <__fixunssfsi+0x34>
    125a:	86 95       	lsr	r24
    125c:	77 95       	ror	r23
    125e:	67 95       	ror	r22
    1260:	b3 95       	inc	r27
    1262:	d9 f7       	brne	.-10     	; 0x125a <__fixunssfsi+0x42>
    1264:	3e f4       	brtc	.+14     	; 0x1274 <__fixunssfsi+0x5c>
    1266:	90 95       	com	r25
    1268:	80 95       	com	r24
    126a:	70 95       	com	r23
    126c:	61 95       	neg	r22
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__floatunsisf>:
    1276:	e8 94       	clt
    1278:	09 c0       	rjmp	.+18     	; 0x128c <__floatsisf+0x12>

0000127a <__floatsisf>:
    127a:	97 fb       	bst	r25, 7
    127c:	3e f4       	brtc	.+14     	; 0x128c <__floatsisf+0x12>
    127e:	90 95       	com	r25
    1280:	80 95       	com	r24
    1282:	70 95       	com	r23
    1284:	61 95       	neg	r22
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	8f 4f       	sbci	r24, 0xFF	; 255
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	99 23       	and	r25, r25
    128e:	a9 f0       	breq	.+42     	; 0x12ba <__floatsisf+0x40>
    1290:	f9 2f       	mov	r31, r25
    1292:	96 e9       	ldi	r25, 0x96	; 150
    1294:	bb 27       	eor	r27, r27
    1296:	93 95       	inc	r25
    1298:	f6 95       	lsr	r31
    129a:	87 95       	ror	r24
    129c:	77 95       	ror	r23
    129e:	67 95       	ror	r22
    12a0:	b7 95       	ror	r27
    12a2:	f1 11       	cpse	r31, r1
    12a4:	f8 cf       	rjmp	.-16     	; 0x1296 <__floatsisf+0x1c>
    12a6:	fa f4       	brpl	.+62     	; 0x12e6 <__floatsisf+0x6c>
    12a8:	bb 0f       	add	r27, r27
    12aa:	11 f4       	brne	.+4      	; 0x12b0 <__floatsisf+0x36>
    12ac:	60 ff       	sbrs	r22, 0
    12ae:	1b c0       	rjmp	.+54     	; 0x12e6 <__floatsisf+0x6c>
    12b0:	6f 5f       	subi	r22, 0xFF	; 255
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	8f 4f       	sbci	r24, 0xFF	; 255
    12b6:	9f 4f       	sbci	r25, 0xFF	; 255
    12b8:	16 c0       	rjmp	.+44     	; 0x12e6 <__floatsisf+0x6c>
    12ba:	88 23       	and	r24, r24
    12bc:	11 f0       	breq	.+4      	; 0x12c2 <__floatsisf+0x48>
    12be:	96 e9       	ldi	r25, 0x96	; 150
    12c0:	11 c0       	rjmp	.+34     	; 0x12e4 <__floatsisf+0x6a>
    12c2:	77 23       	and	r23, r23
    12c4:	21 f0       	breq	.+8      	; 0x12ce <__floatsisf+0x54>
    12c6:	9e e8       	ldi	r25, 0x8E	; 142
    12c8:	87 2f       	mov	r24, r23
    12ca:	76 2f       	mov	r23, r22
    12cc:	05 c0       	rjmp	.+10     	; 0x12d8 <__floatsisf+0x5e>
    12ce:	66 23       	and	r22, r22
    12d0:	71 f0       	breq	.+28     	; 0x12ee <__floatsisf+0x74>
    12d2:	96 e8       	ldi	r25, 0x86	; 134
    12d4:	86 2f       	mov	r24, r22
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	2a f0       	brmi	.+10     	; 0x12e6 <__floatsisf+0x6c>
    12dc:	9a 95       	dec	r25
    12de:	66 0f       	add	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	da f7       	brpl	.-10     	; 0x12dc <__floatsisf+0x62>
    12e6:	88 0f       	add	r24, r24
    12e8:	96 95       	lsr	r25
    12ea:	87 95       	ror	r24
    12ec:	97 f9       	bld	r25, 7
    12ee:	08 95       	ret

000012f0 <__fp_cmp>:
    12f0:	99 0f       	add	r25, r25
    12f2:	00 08       	sbc	r0, r0
    12f4:	55 0f       	add	r21, r21
    12f6:	aa 0b       	sbc	r26, r26
    12f8:	e0 e8       	ldi	r30, 0x80	; 128
    12fa:	fe ef       	ldi	r31, 0xFE	; 254
    12fc:	16 16       	cp	r1, r22
    12fe:	17 06       	cpc	r1, r23
    1300:	e8 07       	cpc	r30, r24
    1302:	f9 07       	cpc	r31, r25
    1304:	c0 f0       	brcs	.+48     	; 0x1336 <__fp_cmp+0x46>
    1306:	12 16       	cp	r1, r18
    1308:	13 06       	cpc	r1, r19
    130a:	e4 07       	cpc	r30, r20
    130c:	f5 07       	cpc	r31, r21
    130e:	98 f0       	brcs	.+38     	; 0x1336 <__fp_cmp+0x46>
    1310:	62 1b       	sub	r22, r18
    1312:	73 0b       	sbc	r23, r19
    1314:	84 0b       	sbc	r24, r20
    1316:	95 0b       	sbc	r25, r21
    1318:	39 f4       	brne	.+14     	; 0x1328 <__fp_cmp+0x38>
    131a:	0a 26       	eor	r0, r26
    131c:	61 f0       	breq	.+24     	; 0x1336 <__fp_cmp+0x46>
    131e:	23 2b       	or	r18, r19
    1320:	24 2b       	or	r18, r20
    1322:	25 2b       	or	r18, r21
    1324:	21 f4       	brne	.+8      	; 0x132e <__fp_cmp+0x3e>
    1326:	08 95       	ret
    1328:	0a 26       	eor	r0, r26
    132a:	09 f4       	brne	.+2      	; 0x132e <__fp_cmp+0x3e>
    132c:	a1 40       	sbci	r26, 0x01	; 1
    132e:	a6 95       	lsr	r26
    1330:	8f ef       	ldi	r24, 0xFF	; 255
    1332:	81 1d       	adc	r24, r1
    1334:	81 1d       	adc	r24, r1
    1336:	08 95       	ret

00001338 <__fp_inf>:
    1338:	97 f9       	bld	r25, 7
    133a:	9f 67       	ori	r25, 0x7F	; 127
    133c:	80 e8       	ldi	r24, 0x80	; 128
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	08 95       	ret

00001344 <__fp_nan>:
    1344:	9f ef       	ldi	r25, 0xFF	; 255
    1346:	80 ec       	ldi	r24, 0xC0	; 192
    1348:	08 95       	ret

0000134a <__fp_pscA>:
    134a:	00 24       	eor	r0, r0
    134c:	0a 94       	dec	r0
    134e:	16 16       	cp	r1, r22
    1350:	17 06       	cpc	r1, r23
    1352:	18 06       	cpc	r1, r24
    1354:	09 06       	cpc	r0, r25
    1356:	08 95       	ret

00001358 <__fp_pscB>:
    1358:	00 24       	eor	r0, r0
    135a:	0a 94       	dec	r0
    135c:	12 16       	cp	r1, r18
    135e:	13 06       	cpc	r1, r19
    1360:	14 06       	cpc	r1, r20
    1362:	05 06       	cpc	r0, r21
    1364:	08 95       	ret

00001366 <__fp_round>:
    1366:	09 2e       	mov	r0, r25
    1368:	03 94       	inc	r0
    136a:	00 0c       	add	r0, r0
    136c:	11 f4       	brne	.+4      	; 0x1372 <__fp_round+0xc>
    136e:	88 23       	and	r24, r24
    1370:	52 f0       	brmi	.+20     	; 0x1386 <__fp_round+0x20>
    1372:	bb 0f       	add	r27, r27
    1374:	40 f4       	brcc	.+16     	; 0x1386 <__fp_round+0x20>
    1376:	bf 2b       	or	r27, r31
    1378:	11 f4       	brne	.+4      	; 0x137e <__fp_round+0x18>
    137a:	60 ff       	sbrs	r22, 0
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <__fp_round+0x20>
    137e:	6f 5f       	subi	r22, 0xFF	; 255
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	8f 4f       	sbci	r24, 0xFF	; 255
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	08 95       	ret

00001388 <__fp_split3>:
    1388:	57 fd       	sbrc	r21, 7
    138a:	90 58       	subi	r25, 0x80	; 128
    138c:	44 0f       	add	r20, r20
    138e:	55 1f       	adc	r21, r21
    1390:	59 f0       	breq	.+22     	; 0x13a8 <__fp_splitA+0x10>
    1392:	5f 3f       	cpi	r21, 0xFF	; 255
    1394:	71 f0       	breq	.+28     	; 0x13b2 <__fp_splitA+0x1a>
    1396:	47 95       	ror	r20

00001398 <__fp_splitA>:
    1398:	88 0f       	add	r24, r24
    139a:	97 fb       	bst	r25, 7
    139c:	99 1f       	adc	r25, r25
    139e:	61 f0       	breq	.+24     	; 0x13b8 <__fp_splitA+0x20>
    13a0:	9f 3f       	cpi	r25, 0xFF	; 255
    13a2:	79 f0       	breq	.+30     	; 0x13c2 <__fp_splitA+0x2a>
    13a4:	87 95       	ror	r24
    13a6:	08 95       	ret
    13a8:	12 16       	cp	r1, r18
    13aa:	13 06       	cpc	r1, r19
    13ac:	14 06       	cpc	r1, r20
    13ae:	55 1f       	adc	r21, r21
    13b0:	f2 cf       	rjmp	.-28     	; 0x1396 <__fp_split3+0xe>
    13b2:	46 95       	lsr	r20
    13b4:	f1 df       	rcall	.-30     	; 0x1398 <__fp_splitA>
    13b6:	08 c0       	rjmp	.+16     	; 0x13c8 <__fp_splitA+0x30>
    13b8:	16 16       	cp	r1, r22
    13ba:	17 06       	cpc	r1, r23
    13bc:	18 06       	cpc	r1, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	f1 cf       	rjmp	.-30     	; 0x13a4 <__fp_splitA+0xc>
    13c2:	86 95       	lsr	r24
    13c4:	71 05       	cpc	r23, r1
    13c6:	61 05       	cpc	r22, r1
    13c8:	08 94       	sec
    13ca:	08 95       	ret

000013cc <__fp_zero>:
    13cc:	e8 94       	clt

000013ce <__fp_szero>:
    13ce:	bb 27       	eor	r27, r27
    13d0:	66 27       	eor	r22, r22
    13d2:	77 27       	eor	r23, r23
    13d4:	cb 01       	movw	r24, r22
    13d6:	97 f9       	bld	r25, 7
    13d8:	08 95       	ret

000013da <__mulsf3>:
    13da:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3x>
    13de:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_round>
    13e2:	0e 94 a5 09 	call	0x134a	; 0x134a <__fp_pscA>
    13e6:	38 f0       	brcs	.+14     	; 0x13f6 <__mulsf3+0x1c>
    13e8:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fp_pscB>
    13ec:	20 f0       	brcs	.+8      	; 0x13f6 <__mulsf3+0x1c>
    13ee:	95 23       	and	r25, r21
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <__mulsf3+0x1c>
    13f2:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__fp_inf>
    13f6:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_nan>
    13fa:	11 24       	eor	r1, r1
    13fc:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__fp_szero>

00001400 <__mulsf3x>:
    1400:	0e 94 c4 09 	call	0x1388	; 0x1388 <__fp_split3>
    1404:	70 f3       	brcs	.-36     	; 0x13e2 <__mulsf3+0x8>

00001406 <__mulsf3_pse>:
    1406:	95 9f       	mul	r25, r21
    1408:	c1 f3       	breq	.-16     	; 0x13fa <__mulsf3+0x20>
    140a:	95 0f       	add	r25, r21
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	55 1f       	adc	r21, r21
    1410:	62 9f       	mul	r22, r18
    1412:	f0 01       	movw	r30, r0
    1414:	72 9f       	mul	r23, r18
    1416:	bb 27       	eor	r27, r27
    1418:	f0 0d       	add	r31, r0
    141a:	b1 1d       	adc	r27, r1
    141c:	63 9f       	mul	r22, r19
    141e:	aa 27       	eor	r26, r26
    1420:	f0 0d       	add	r31, r0
    1422:	b1 1d       	adc	r27, r1
    1424:	aa 1f       	adc	r26, r26
    1426:	64 9f       	mul	r22, r20
    1428:	66 27       	eor	r22, r22
    142a:	b0 0d       	add	r27, r0
    142c:	a1 1d       	adc	r26, r1
    142e:	66 1f       	adc	r22, r22
    1430:	82 9f       	mul	r24, r18
    1432:	22 27       	eor	r18, r18
    1434:	b0 0d       	add	r27, r0
    1436:	a1 1d       	adc	r26, r1
    1438:	62 1f       	adc	r22, r18
    143a:	73 9f       	mul	r23, r19
    143c:	b0 0d       	add	r27, r0
    143e:	a1 1d       	adc	r26, r1
    1440:	62 1f       	adc	r22, r18
    1442:	83 9f       	mul	r24, r19
    1444:	a0 0d       	add	r26, r0
    1446:	61 1d       	adc	r22, r1
    1448:	22 1f       	adc	r18, r18
    144a:	74 9f       	mul	r23, r20
    144c:	33 27       	eor	r19, r19
    144e:	a0 0d       	add	r26, r0
    1450:	61 1d       	adc	r22, r1
    1452:	23 1f       	adc	r18, r19
    1454:	84 9f       	mul	r24, r20
    1456:	60 0d       	add	r22, r0
    1458:	21 1d       	adc	r18, r1
    145a:	82 2f       	mov	r24, r18
    145c:	76 2f       	mov	r23, r22
    145e:	6a 2f       	mov	r22, r26
    1460:	11 24       	eor	r1, r1
    1462:	9f 57       	subi	r25, 0x7F	; 127
    1464:	50 40       	sbci	r21, 0x00	; 0
    1466:	9a f0       	brmi	.+38     	; 0x148e <__mulsf3_pse+0x88>
    1468:	f1 f0       	breq	.+60     	; 0x14a6 <__mulsf3_pse+0xa0>
    146a:	88 23       	and	r24, r24
    146c:	4a f0       	brmi	.+18     	; 0x1480 <__mulsf3_pse+0x7a>
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	bb 1f       	adc	r27, r27
    1474:	66 1f       	adc	r22, r22
    1476:	77 1f       	adc	r23, r23
    1478:	88 1f       	adc	r24, r24
    147a:	91 50       	subi	r25, 0x01	; 1
    147c:	50 40       	sbci	r21, 0x00	; 0
    147e:	a9 f7       	brne	.-22     	; 0x146a <__mulsf3_pse+0x64>
    1480:	9e 3f       	cpi	r25, 0xFE	; 254
    1482:	51 05       	cpc	r21, r1
    1484:	80 f0       	brcs	.+32     	; 0x14a6 <__mulsf3_pse+0xa0>
    1486:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__fp_inf>
    148a:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__fp_szero>
    148e:	5f 3f       	cpi	r21, 0xFF	; 255
    1490:	e4 f3       	brlt	.-8      	; 0x148a <__mulsf3_pse+0x84>
    1492:	98 3e       	cpi	r25, 0xE8	; 232
    1494:	d4 f3       	brlt	.-12     	; 0x148a <__mulsf3_pse+0x84>
    1496:	86 95       	lsr	r24
    1498:	77 95       	ror	r23
    149a:	67 95       	ror	r22
    149c:	b7 95       	ror	r27
    149e:	f7 95       	ror	r31
    14a0:	e7 95       	ror	r30
    14a2:	9f 5f       	subi	r25, 0xFF	; 255
    14a4:	c1 f7       	brne	.-16     	; 0x1496 <__mulsf3_pse+0x90>
    14a6:	fe 2b       	or	r31, r30
    14a8:	88 0f       	add	r24, r24
    14aa:	91 1d       	adc	r25, r1
    14ac:	96 95       	lsr	r25
    14ae:	87 95       	ror	r24
    14b0:	97 f9       	bld	r25, 7
    14b2:	08 95       	ret

000014b4 <__divmodhi4>:
    14b4:	97 fb       	bst	r25, 7
    14b6:	07 2e       	mov	r0, r23
    14b8:	16 f4       	brtc	.+4      	; 0x14be <__divmodhi4+0xa>
    14ba:	00 94       	com	r0
    14bc:	07 d0       	rcall	.+14     	; 0x14cc <__divmodhi4_neg1>
    14be:	77 fd       	sbrc	r23, 7
    14c0:	09 d0       	rcall	.+18     	; 0x14d4 <__divmodhi4_neg2>
    14c2:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__udivmodhi4>
    14c6:	07 fc       	sbrc	r0, 7
    14c8:	05 d0       	rcall	.+10     	; 0x14d4 <__divmodhi4_neg2>
    14ca:	3e f4       	brtc	.+14     	; 0x14da <__divmodhi4_exit>

000014cc <__divmodhi4_neg1>:
    14cc:	90 95       	com	r25
    14ce:	81 95       	neg	r24
    14d0:	9f 4f       	sbci	r25, 0xFF	; 255
    14d2:	08 95       	ret

000014d4 <__divmodhi4_neg2>:
    14d4:	70 95       	com	r23
    14d6:	61 95       	neg	r22
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255

000014da <__divmodhi4_exit>:
    14da:	08 95       	ret

000014dc <__udivmodhi4>:
    14dc:	aa 1b       	sub	r26, r26
    14de:	bb 1b       	sub	r27, r27
    14e0:	51 e1       	ldi	r21, 0x11	; 17
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <__udivmodhi4_ep>

000014e4 <__udivmodhi4_loop>:
    14e4:	aa 1f       	adc	r26, r26
    14e6:	bb 1f       	adc	r27, r27
    14e8:	a6 17       	cp	r26, r22
    14ea:	b7 07       	cpc	r27, r23
    14ec:	10 f0       	brcs	.+4      	; 0x14f2 <__udivmodhi4_ep>
    14ee:	a6 1b       	sub	r26, r22
    14f0:	b7 0b       	sbc	r27, r23

000014f2 <__udivmodhi4_ep>:
    14f2:	88 1f       	adc	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	5a 95       	dec	r21
    14f8:	a9 f7       	brne	.-22     	; 0x14e4 <__udivmodhi4_loop>
    14fa:	80 95       	com	r24
    14fc:	90 95       	com	r25
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	08 95       	ret

00001504 <do_rand>:
    1504:	8f 92       	push	r8
    1506:	9f 92       	push	r9
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	ec 01       	movw	r28, r24
    151a:	68 81       	ld	r22, Y
    151c:	79 81       	ldd	r23, Y+1	; 0x01
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	9b 81       	ldd	r25, Y+3	; 0x03
    1522:	61 15       	cp	r22, r1
    1524:	71 05       	cpc	r23, r1
    1526:	81 05       	cpc	r24, r1
    1528:	91 05       	cpc	r25, r1
    152a:	21 f4       	brne	.+8      	; 0x1534 <do_rand+0x30>
    152c:	64 e2       	ldi	r22, 0x24	; 36
    152e:	79 ed       	ldi	r23, 0xD9	; 217
    1530:	8b e5       	ldi	r24, 0x5B	; 91
    1532:	97 e0       	ldi	r25, 0x07	; 7
    1534:	2d e1       	ldi	r18, 0x1D	; 29
    1536:	33 ef       	ldi	r19, 0xF3	; 243
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__divmodsi4>
    1540:	49 01       	movw	r8, r18
    1542:	5a 01       	movw	r10, r20
    1544:	9b 01       	movw	r18, r22
    1546:	ac 01       	movw	r20, r24
    1548:	a7 ea       	ldi	r26, 0xA7	; 167
    154a:	b1 e4       	ldi	r27, 0x41	; 65
    154c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__muluhisi3>
    1550:	6b 01       	movw	r12, r22
    1552:	7c 01       	movw	r14, r24
    1554:	ac ee       	ldi	r26, 0xEC	; 236
    1556:	b4 ef       	ldi	r27, 0xF4	; 244
    1558:	a5 01       	movw	r20, r10
    155a:	94 01       	movw	r18, r8
    155c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__mulohisi3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	8c 0d       	add	r24, r12
    1566:	9d 1d       	adc	r25, r13
    1568:	ae 1d       	adc	r26, r14
    156a:	bf 1d       	adc	r27, r15
    156c:	b7 ff       	sbrs	r27, 7
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <do_rand+0x72>
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	a1 09       	sbc	r26, r1
    1574:	b0 48       	sbci	r27, 0x80	; 128
    1576:	88 83       	st	Y, r24
    1578:	99 83       	std	Y+1, r25	; 0x01
    157a:	aa 83       	std	Y+2, r26	; 0x02
    157c:	bb 83       	std	Y+3, r27	; 0x03
    157e:	9f 77       	andi	r25, 0x7F	; 127
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	df 90       	pop	r13
    158a:	cf 90       	pop	r12
    158c:	bf 90       	pop	r11
    158e:	af 90       	pop	r10
    1590:	9f 90       	pop	r9
    1592:	8f 90       	pop	r8
    1594:	08 95       	ret

00001596 <rand_r>:
    1596:	0e 94 82 0a 	call	0x1504	; 0x1504 <do_rand>
    159a:	08 95       	ret

0000159c <rand>:
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	0e 94 82 0a 	call	0x1504	; 0x1504 <do_rand>
    15a4:	08 95       	ret

000015a6 <srand>:
    15a6:	a0 e0       	ldi	r26, 0x00	; 0
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    15ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    15b2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    15b6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    15ba:	08 95       	ret

000015bc <sprintf>:
    15bc:	ae e0       	ldi	r26, 0x0E	; 14
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e4 ee       	ldi	r30, 0xE4	; 228
    15c2:	fa e0       	ldi	r31, 0x0A	; 10
    15c4:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__prologue_saves__+0x1c>
    15c8:	0d 89       	ldd	r16, Y+21	; 0x15
    15ca:	1e 89       	ldd	r17, Y+22	; 0x16
    15cc:	86 e0       	ldi	r24, 0x06	; 6
    15ce:	8c 83       	std	Y+4, r24	; 0x04
    15d0:	1a 83       	std	Y+2, r17	; 0x02
    15d2:	09 83       	std	Y+1, r16	; 0x01
    15d4:	8f ef       	ldi	r24, 0xFF	; 255
    15d6:	9f e7       	ldi	r25, 0x7F	; 127
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	ae 01       	movw	r20, r28
    15de:	47 5e       	subi	r20, 0xE7	; 231
    15e0:	5f 4f       	sbci	r21, 0xFF	; 255
    15e2:	6f 89       	ldd	r22, Y+23	; 0x17
    15e4:	78 8d       	ldd	r23, Y+24	; 0x18
    15e6:	ce 01       	movw	r24, r28
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	0e 94 00 0b 	call	0x1600	; 0x1600 <vfprintf>
    15ee:	ef 81       	ldd	r30, Y+7	; 0x07
    15f0:	f8 85       	ldd	r31, Y+8	; 0x08
    15f2:	e0 0f       	add	r30, r16
    15f4:	f1 1f       	adc	r31, r17
    15f6:	10 82       	st	Z, r1
    15f8:	2e 96       	adiw	r28, 0x0e	; 14
    15fa:	e4 e0       	ldi	r30, 0x04	; 4
    15fc:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__epilogue_restores__+0x1c>

00001600 <vfprintf>:
    1600:	ab e0       	ldi	r26, 0x0B	; 11
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e6 e0       	ldi	r30, 0x06	; 6
    1606:	fb e0       	ldi	r31, 0x0B	; 11
    1608:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__prologue_saves__>
    160c:	6c 01       	movw	r12, r24
    160e:	7b 01       	movw	r14, r22
    1610:	8a 01       	movw	r16, r20
    1612:	fc 01       	movw	r30, r24
    1614:	17 82       	std	Z+7, r1	; 0x07
    1616:	16 82       	std	Z+6, r1	; 0x06
    1618:	83 81       	ldd	r24, Z+3	; 0x03
    161a:	81 ff       	sbrs	r24, 1
    161c:	cc c1       	rjmp	.+920    	; 0x19b6 <vfprintf+0x3b6>
    161e:	ce 01       	movw	r24, r28
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	3c 01       	movw	r6, r24
    1624:	f6 01       	movw	r30, r12
    1626:	93 81       	ldd	r25, Z+3	; 0x03
    1628:	f7 01       	movw	r30, r14
    162a:	93 fd       	sbrc	r25, 3
    162c:	85 91       	lpm	r24, Z+
    162e:	93 ff       	sbrs	r25, 3
    1630:	81 91       	ld	r24, Z+
    1632:	7f 01       	movw	r14, r30
    1634:	88 23       	and	r24, r24
    1636:	09 f4       	brne	.+2      	; 0x163a <vfprintf+0x3a>
    1638:	ba c1       	rjmp	.+884    	; 0x19ae <vfprintf+0x3ae>
    163a:	85 32       	cpi	r24, 0x25	; 37
    163c:	39 f4       	brne	.+14     	; 0x164c <vfprintf+0x4c>
    163e:	93 fd       	sbrc	r25, 3
    1640:	85 91       	lpm	r24, Z+
    1642:	93 ff       	sbrs	r25, 3
    1644:	81 91       	ld	r24, Z+
    1646:	7f 01       	movw	r14, r30
    1648:	85 32       	cpi	r24, 0x25	; 37
    164a:	29 f4       	brne	.+10     	; 0x1656 <vfprintf+0x56>
    164c:	b6 01       	movw	r22, r12
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <fputc>
    1654:	e7 cf       	rjmp	.-50     	; 0x1624 <vfprintf+0x24>
    1656:	91 2c       	mov	r9, r1
    1658:	21 2c       	mov	r2, r1
    165a:	31 2c       	mov	r3, r1
    165c:	ff e1       	ldi	r31, 0x1F	; 31
    165e:	f3 15       	cp	r31, r3
    1660:	d8 f0       	brcs	.+54     	; 0x1698 <vfprintf+0x98>
    1662:	8b 32       	cpi	r24, 0x2B	; 43
    1664:	79 f0       	breq	.+30     	; 0x1684 <vfprintf+0x84>
    1666:	38 f4       	brcc	.+14     	; 0x1676 <vfprintf+0x76>
    1668:	80 32       	cpi	r24, 0x20	; 32
    166a:	79 f0       	breq	.+30     	; 0x168a <vfprintf+0x8a>
    166c:	83 32       	cpi	r24, 0x23	; 35
    166e:	a1 f4       	brne	.+40     	; 0x1698 <vfprintf+0x98>
    1670:	23 2d       	mov	r18, r3
    1672:	20 61       	ori	r18, 0x10	; 16
    1674:	1d c0       	rjmp	.+58     	; 0x16b0 <vfprintf+0xb0>
    1676:	8d 32       	cpi	r24, 0x2D	; 45
    1678:	61 f0       	breq	.+24     	; 0x1692 <vfprintf+0x92>
    167a:	80 33       	cpi	r24, 0x30	; 48
    167c:	69 f4       	brne	.+26     	; 0x1698 <vfprintf+0x98>
    167e:	23 2d       	mov	r18, r3
    1680:	21 60       	ori	r18, 0x01	; 1
    1682:	16 c0       	rjmp	.+44     	; 0x16b0 <vfprintf+0xb0>
    1684:	83 2d       	mov	r24, r3
    1686:	82 60       	ori	r24, 0x02	; 2
    1688:	38 2e       	mov	r3, r24
    168a:	e3 2d       	mov	r30, r3
    168c:	e4 60       	ori	r30, 0x04	; 4
    168e:	3e 2e       	mov	r3, r30
    1690:	2a c0       	rjmp	.+84     	; 0x16e6 <vfprintf+0xe6>
    1692:	f3 2d       	mov	r31, r3
    1694:	f8 60       	ori	r31, 0x08	; 8
    1696:	1d c0       	rjmp	.+58     	; 0x16d2 <vfprintf+0xd2>
    1698:	37 fc       	sbrc	r3, 7
    169a:	2d c0       	rjmp	.+90     	; 0x16f6 <vfprintf+0xf6>
    169c:	20 ed       	ldi	r18, 0xD0	; 208
    169e:	28 0f       	add	r18, r24
    16a0:	2a 30       	cpi	r18, 0x0A	; 10
    16a2:	40 f0       	brcs	.+16     	; 0x16b4 <vfprintf+0xb4>
    16a4:	8e 32       	cpi	r24, 0x2E	; 46
    16a6:	b9 f4       	brne	.+46     	; 0x16d6 <vfprintf+0xd6>
    16a8:	36 fc       	sbrc	r3, 6
    16aa:	81 c1       	rjmp	.+770    	; 0x19ae <vfprintf+0x3ae>
    16ac:	23 2d       	mov	r18, r3
    16ae:	20 64       	ori	r18, 0x40	; 64
    16b0:	32 2e       	mov	r3, r18
    16b2:	19 c0       	rjmp	.+50     	; 0x16e6 <vfprintf+0xe6>
    16b4:	36 fe       	sbrs	r3, 6
    16b6:	06 c0       	rjmp	.+12     	; 0x16c4 <vfprintf+0xc4>
    16b8:	8a e0       	ldi	r24, 0x0A	; 10
    16ba:	98 9e       	mul	r9, r24
    16bc:	20 0d       	add	r18, r0
    16be:	11 24       	eor	r1, r1
    16c0:	92 2e       	mov	r9, r18
    16c2:	11 c0       	rjmp	.+34     	; 0x16e6 <vfprintf+0xe6>
    16c4:	ea e0       	ldi	r30, 0x0A	; 10
    16c6:	2e 9e       	mul	r2, r30
    16c8:	20 0d       	add	r18, r0
    16ca:	11 24       	eor	r1, r1
    16cc:	22 2e       	mov	r2, r18
    16ce:	f3 2d       	mov	r31, r3
    16d0:	f0 62       	ori	r31, 0x20	; 32
    16d2:	3f 2e       	mov	r3, r31
    16d4:	08 c0       	rjmp	.+16     	; 0x16e6 <vfprintf+0xe6>
    16d6:	8c 36       	cpi	r24, 0x6C	; 108
    16d8:	21 f4       	brne	.+8      	; 0x16e2 <vfprintf+0xe2>
    16da:	83 2d       	mov	r24, r3
    16dc:	80 68       	ori	r24, 0x80	; 128
    16de:	38 2e       	mov	r3, r24
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <vfprintf+0xe6>
    16e2:	88 36       	cpi	r24, 0x68	; 104
    16e4:	41 f4       	brne	.+16     	; 0x16f6 <vfprintf+0xf6>
    16e6:	f7 01       	movw	r30, r14
    16e8:	93 fd       	sbrc	r25, 3
    16ea:	85 91       	lpm	r24, Z+
    16ec:	93 ff       	sbrs	r25, 3
    16ee:	81 91       	ld	r24, Z+
    16f0:	7f 01       	movw	r14, r30
    16f2:	81 11       	cpse	r24, r1
    16f4:	b3 cf       	rjmp	.-154    	; 0x165c <vfprintf+0x5c>
    16f6:	98 2f       	mov	r25, r24
    16f8:	9f 7d       	andi	r25, 0xDF	; 223
    16fa:	95 54       	subi	r25, 0x45	; 69
    16fc:	93 30       	cpi	r25, 0x03	; 3
    16fe:	28 f4       	brcc	.+10     	; 0x170a <vfprintf+0x10a>
    1700:	0c 5f       	subi	r16, 0xFC	; 252
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	9f e3       	ldi	r25, 0x3F	; 63
    1706:	99 83       	std	Y+1, r25	; 0x01
    1708:	0d c0       	rjmp	.+26     	; 0x1724 <vfprintf+0x124>
    170a:	83 36       	cpi	r24, 0x63	; 99
    170c:	31 f0       	breq	.+12     	; 0x171a <vfprintf+0x11a>
    170e:	83 37       	cpi	r24, 0x73	; 115
    1710:	71 f0       	breq	.+28     	; 0x172e <vfprintf+0x12e>
    1712:	83 35       	cpi	r24, 0x53	; 83
    1714:	09 f0       	breq	.+2      	; 0x1718 <vfprintf+0x118>
    1716:	59 c0       	rjmp	.+178    	; 0x17ca <vfprintf+0x1ca>
    1718:	21 c0       	rjmp	.+66     	; 0x175c <vfprintf+0x15c>
    171a:	f8 01       	movw	r30, r16
    171c:	80 81       	ld	r24, Z
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	0e 5f       	subi	r16, 0xFE	; 254
    1722:	1f 4f       	sbci	r17, 0xFF	; 255
    1724:	88 24       	eor	r8, r8
    1726:	83 94       	inc	r8
    1728:	91 2c       	mov	r9, r1
    172a:	53 01       	movw	r10, r6
    172c:	13 c0       	rjmp	.+38     	; 0x1754 <vfprintf+0x154>
    172e:	28 01       	movw	r4, r16
    1730:	f2 e0       	ldi	r31, 0x02	; 2
    1732:	4f 0e       	add	r4, r31
    1734:	51 1c       	adc	r5, r1
    1736:	f8 01       	movw	r30, r16
    1738:	a0 80       	ld	r10, Z
    173a:	b1 80       	ldd	r11, Z+1	; 0x01
    173c:	36 fe       	sbrs	r3, 6
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <vfprintf+0x146>
    1740:	69 2d       	mov	r22, r9
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	02 c0       	rjmp	.+4      	; 0x174a <vfprintf+0x14a>
    1746:	6f ef       	ldi	r22, 0xFF	; 255
    1748:	7f ef       	ldi	r23, 0xFF	; 255
    174a:	c5 01       	movw	r24, r10
    174c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <strnlen>
    1750:	4c 01       	movw	r8, r24
    1752:	82 01       	movw	r16, r4
    1754:	f3 2d       	mov	r31, r3
    1756:	ff 77       	andi	r31, 0x7F	; 127
    1758:	3f 2e       	mov	r3, r31
    175a:	16 c0       	rjmp	.+44     	; 0x1788 <vfprintf+0x188>
    175c:	28 01       	movw	r4, r16
    175e:	22 e0       	ldi	r18, 0x02	; 2
    1760:	42 0e       	add	r4, r18
    1762:	51 1c       	adc	r5, r1
    1764:	f8 01       	movw	r30, r16
    1766:	a0 80       	ld	r10, Z
    1768:	b1 80       	ldd	r11, Z+1	; 0x01
    176a:	36 fe       	sbrs	r3, 6
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <vfprintf+0x174>
    176e:	69 2d       	mov	r22, r9
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <vfprintf+0x178>
    1774:	6f ef       	ldi	r22, 0xFF	; 255
    1776:	7f ef       	ldi	r23, 0xFF	; 255
    1778:	c5 01       	movw	r24, r10
    177a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <strnlen_P>
    177e:	4c 01       	movw	r8, r24
    1780:	f3 2d       	mov	r31, r3
    1782:	f0 68       	ori	r31, 0x80	; 128
    1784:	3f 2e       	mov	r3, r31
    1786:	82 01       	movw	r16, r4
    1788:	33 fc       	sbrc	r3, 3
    178a:	1b c0       	rjmp	.+54     	; 0x17c2 <vfprintf+0x1c2>
    178c:	82 2d       	mov	r24, r2
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	88 16       	cp	r8, r24
    1792:	99 06       	cpc	r9, r25
    1794:	b0 f4       	brcc	.+44     	; 0x17c2 <vfprintf+0x1c2>
    1796:	b6 01       	movw	r22, r12
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <fputc>
    17a0:	2a 94       	dec	r2
    17a2:	f4 cf       	rjmp	.-24     	; 0x178c <vfprintf+0x18c>
    17a4:	f5 01       	movw	r30, r10
    17a6:	37 fc       	sbrc	r3, 7
    17a8:	85 91       	lpm	r24, Z+
    17aa:	37 fe       	sbrs	r3, 7
    17ac:	81 91       	ld	r24, Z+
    17ae:	5f 01       	movw	r10, r30
    17b0:	b6 01       	movw	r22, r12
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <fputc>
    17b8:	21 10       	cpse	r2, r1
    17ba:	2a 94       	dec	r2
    17bc:	21 e0       	ldi	r18, 0x01	; 1
    17be:	82 1a       	sub	r8, r18
    17c0:	91 08       	sbc	r9, r1
    17c2:	81 14       	cp	r8, r1
    17c4:	91 04       	cpc	r9, r1
    17c6:	71 f7       	brne	.-36     	; 0x17a4 <vfprintf+0x1a4>
    17c8:	e8 c0       	rjmp	.+464    	; 0x199a <vfprintf+0x39a>
    17ca:	84 36       	cpi	r24, 0x64	; 100
    17cc:	11 f0       	breq	.+4      	; 0x17d2 <vfprintf+0x1d2>
    17ce:	89 36       	cpi	r24, 0x69	; 105
    17d0:	41 f5       	brne	.+80     	; 0x1822 <vfprintf+0x222>
    17d2:	f8 01       	movw	r30, r16
    17d4:	37 fe       	sbrs	r3, 7
    17d6:	07 c0       	rjmp	.+14     	; 0x17e6 <vfprintf+0x1e6>
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	93 81       	ldd	r25, Z+3	; 0x03
    17e0:	0c 5f       	subi	r16, 0xFC	; 252
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <vfprintf+0x1f6>
    17e6:	60 81       	ld	r22, Z
    17e8:	71 81       	ldd	r23, Z+1	; 0x01
    17ea:	07 2e       	mov	r0, r23
    17ec:	00 0c       	add	r0, r0
    17ee:	88 0b       	sbc	r24, r24
    17f0:	99 0b       	sbc	r25, r25
    17f2:	0e 5f       	subi	r16, 0xFE	; 254
    17f4:	1f 4f       	sbci	r17, 0xFF	; 255
    17f6:	f3 2d       	mov	r31, r3
    17f8:	ff 76       	andi	r31, 0x6F	; 111
    17fa:	3f 2e       	mov	r3, r31
    17fc:	97 ff       	sbrs	r25, 7
    17fe:	09 c0       	rjmp	.+18     	; 0x1812 <vfprintf+0x212>
    1800:	90 95       	com	r25
    1802:	80 95       	com	r24
    1804:	70 95       	com	r23
    1806:	61 95       	neg	r22
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	8f 4f       	sbci	r24, 0xFF	; 255
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	f0 68       	ori	r31, 0x80	; 128
    1810:	3f 2e       	mov	r3, r31
    1812:	2a e0       	ldi	r18, 0x0A	; 10
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	a3 01       	movw	r20, r6
    1818:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__ultoa_invert>
    181c:	88 2e       	mov	r8, r24
    181e:	86 18       	sub	r8, r6
    1820:	45 c0       	rjmp	.+138    	; 0x18ac <vfprintf+0x2ac>
    1822:	85 37       	cpi	r24, 0x75	; 117
    1824:	31 f4       	brne	.+12     	; 0x1832 <vfprintf+0x232>
    1826:	23 2d       	mov	r18, r3
    1828:	2f 7e       	andi	r18, 0xEF	; 239
    182a:	b2 2e       	mov	r11, r18
    182c:	2a e0       	ldi	r18, 0x0A	; 10
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	25 c0       	rjmp	.+74     	; 0x187c <vfprintf+0x27c>
    1832:	93 2d       	mov	r25, r3
    1834:	99 7f       	andi	r25, 0xF9	; 249
    1836:	b9 2e       	mov	r11, r25
    1838:	8f 36       	cpi	r24, 0x6F	; 111
    183a:	c1 f0       	breq	.+48     	; 0x186c <vfprintf+0x26c>
    183c:	18 f4       	brcc	.+6      	; 0x1844 <vfprintf+0x244>
    183e:	88 35       	cpi	r24, 0x58	; 88
    1840:	79 f0       	breq	.+30     	; 0x1860 <vfprintf+0x260>
    1842:	b5 c0       	rjmp	.+362    	; 0x19ae <vfprintf+0x3ae>
    1844:	80 37       	cpi	r24, 0x70	; 112
    1846:	19 f0       	breq	.+6      	; 0x184e <vfprintf+0x24e>
    1848:	88 37       	cpi	r24, 0x78	; 120
    184a:	21 f0       	breq	.+8      	; 0x1854 <vfprintf+0x254>
    184c:	b0 c0       	rjmp	.+352    	; 0x19ae <vfprintf+0x3ae>
    184e:	e9 2f       	mov	r30, r25
    1850:	e0 61       	ori	r30, 0x10	; 16
    1852:	be 2e       	mov	r11, r30
    1854:	b4 fe       	sbrs	r11, 4
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <vfprintf+0x272>
    1858:	fb 2d       	mov	r31, r11
    185a:	f4 60       	ori	r31, 0x04	; 4
    185c:	bf 2e       	mov	r11, r31
    185e:	09 c0       	rjmp	.+18     	; 0x1872 <vfprintf+0x272>
    1860:	34 fe       	sbrs	r3, 4
    1862:	0a c0       	rjmp	.+20     	; 0x1878 <vfprintf+0x278>
    1864:	29 2f       	mov	r18, r25
    1866:	26 60       	ori	r18, 0x06	; 6
    1868:	b2 2e       	mov	r11, r18
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <vfprintf+0x278>
    186c:	28 e0       	ldi	r18, 0x08	; 8
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	05 c0       	rjmp	.+10     	; 0x187c <vfprintf+0x27c>
    1872:	20 e1       	ldi	r18, 0x10	; 16
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	02 c0       	rjmp	.+4      	; 0x187c <vfprintf+0x27c>
    1878:	20 e1       	ldi	r18, 0x10	; 16
    187a:	32 e0       	ldi	r19, 0x02	; 2
    187c:	f8 01       	movw	r30, r16
    187e:	b7 fe       	sbrs	r11, 7
    1880:	07 c0       	rjmp	.+14     	; 0x1890 <vfprintf+0x290>
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	0c 5f       	subi	r16, 0xFC	; 252
    188c:	1f 4f       	sbci	r17, 0xFF	; 255
    188e:	06 c0       	rjmp	.+12     	; 0x189c <vfprintf+0x29c>
    1890:	60 81       	ld	r22, Z
    1892:	71 81       	ldd	r23, Z+1	; 0x01
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 5f       	subi	r16, 0xFE	; 254
    189a:	1f 4f       	sbci	r17, 0xFF	; 255
    189c:	a3 01       	movw	r20, r6
    189e:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__ultoa_invert>
    18a2:	88 2e       	mov	r8, r24
    18a4:	86 18       	sub	r8, r6
    18a6:	fb 2d       	mov	r31, r11
    18a8:	ff 77       	andi	r31, 0x7F	; 127
    18aa:	3f 2e       	mov	r3, r31
    18ac:	36 fe       	sbrs	r3, 6
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <vfprintf+0x2ca>
    18b0:	23 2d       	mov	r18, r3
    18b2:	2e 7f       	andi	r18, 0xFE	; 254
    18b4:	a2 2e       	mov	r10, r18
    18b6:	89 14       	cp	r8, r9
    18b8:	58 f4       	brcc	.+22     	; 0x18d0 <vfprintf+0x2d0>
    18ba:	34 fe       	sbrs	r3, 4
    18bc:	0b c0       	rjmp	.+22     	; 0x18d4 <vfprintf+0x2d4>
    18be:	32 fc       	sbrc	r3, 2
    18c0:	09 c0       	rjmp	.+18     	; 0x18d4 <vfprintf+0x2d4>
    18c2:	83 2d       	mov	r24, r3
    18c4:	8e 7e       	andi	r24, 0xEE	; 238
    18c6:	a8 2e       	mov	r10, r24
    18c8:	05 c0       	rjmp	.+10     	; 0x18d4 <vfprintf+0x2d4>
    18ca:	b8 2c       	mov	r11, r8
    18cc:	a3 2c       	mov	r10, r3
    18ce:	03 c0       	rjmp	.+6      	; 0x18d6 <vfprintf+0x2d6>
    18d0:	b8 2c       	mov	r11, r8
    18d2:	01 c0       	rjmp	.+2      	; 0x18d6 <vfprintf+0x2d6>
    18d4:	b9 2c       	mov	r11, r9
    18d6:	a4 fe       	sbrs	r10, 4
    18d8:	0f c0       	rjmp	.+30     	; 0x18f8 <vfprintf+0x2f8>
    18da:	fe 01       	movw	r30, r28
    18dc:	e8 0d       	add	r30, r8
    18de:	f1 1d       	adc	r31, r1
    18e0:	80 81       	ld	r24, Z
    18e2:	80 33       	cpi	r24, 0x30	; 48
    18e4:	21 f4       	brne	.+8      	; 0x18ee <vfprintf+0x2ee>
    18e6:	9a 2d       	mov	r25, r10
    18e8:	99 7e       	andi	r25, 0xE9	; 233
    18ea:	a9 2e       	mov	r10, r25
    18ec:	09 c0       	rjmp	.+18     	; 0x1900 <vfprintf+0x300>
    18ee:	a2 fe       	sbrs	r10, 2
    18f0:	06 c0       	rjmp	.+12     	; 0x18fe <vfprintf+0x2fe>
    18f2:	b3 94       	inc	r11
    18f4:	b3 94       	inc	r11
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <vfprintf+0x300>
    18f8:	8a 2d       	mov	r24, r10
    18fa:	86 78       	andi	r24, 0x86	; 134
    18fc:	09 f0       	breq	.+2      	; 0x1900 <vfprintf+0x300>
    18fe:	b3 94       	inc	r11
    1900:	a3 fc       	sbrc	r10, 3
    1902:	11 c0       	rjmp	.+34     	; 0x1926 <vfprintf+0x326>
    1904:	a0 fe       	sbrs	r10, 0
    1906:	06 c0       	rjmp	.+12     	; 0x1914 <vfprintf+0x314>
    1908:	b2 14       	cp	r11, r2
    190a:	88 f4       	brcc	.+34     	; 0x192e <vfprintf+0x32e>
    190c:	28 0c       	add	r2, r8
    190e:	92 2c       	mov	r9, r2
    1910:	9b 18       	sub	r9, r11
    1912:	0e c0       	rjmp	.+28     	; 0x1930 <vfprintf+0x330>
    1914:	b2 14       	cp	r11, r2
    1916:	60 f4       	brcc	.+24     	; 0x1930 <vfprintf+0x330>
    1918:	b6 01       	movw	r22, r12
    191a:	80 e2       	ldi	r24, 0x20	; 32
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <fputc>
    1922:	b3 94       	inc	r11
    1924:	f7 cf       	rjmp	.-18     	; 0x1914 <vfprintf+0x314>
    1926:	b2 14       	cp	r11, r2
    1928:	18 f4       	brcc	.+6      	; 0x1930 <vfprintf+0x330>
    192a:	2b 18       	sub	r2, r11
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <vfprintf+0x332>
    192e:	98 2c       	mov	r9, r8
    1930:	21 2c       	mov	r2, r1
    1932:	a4 fe       	sbrs	r10, 4
    1934:	10 c0       	rjmp	.+32     	; 0x1956 <vfprintf+0x356>
    1936:	b6 01       	movw	r22, r12
    1938:	80 e3       	ldi	r24, 0x30	; 48
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <fputc>
    1940:	a2 fe       	sbrs	r10, 2
    1942:	17 c0       	rjmp	.+46     	; 0x1972 <vfprintf+0x372>
    1944:	a1 fc       	sbrc	r10, 1
    1946:	03 c0       	rjmp	.+6      	; 0x194e <vfprintf+0x34e>
    1948:	88 e7       	ldi	r24, 0x78	; 120
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <vfprintf+0x352>
    194e:	88 e5       	ldi	r24, 0x58	; 88
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	b6 01       	movw	r22, r12
    1954:	0c c0       	rjmp	.+24     	; 0x196e <vfprintf+0x36e>
    1956:	8a 2d       	mov	r24, r10
    1958:	86 78       	andi	r24, 0x86	; 134
    195a:	59 f0       	breq	.+22     	; 0x1972 <vfprintf+0x372>
    195c:	a1 fe       	sbrs	r10, 1
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <vfprintf+0x364>
    1960:	8b e2       	ldi	r24, 0x2B	; 43
    1962:	01 c0       	rjmp	.+2      	; 0x1966 <vfprintf+0x366>
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	a7 fc       	sbrc	r10, 7
    1968:	8d e2       	ldi	r24, 0x2D	; 45
    196a:	b6 01       	movw	r22, r12
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <fputc>
    1972:	89 14       	cp	r8, r9
    1974:	38 f4       	brcc	.+14     	; 0x1984 <vfprintf+0x384>
    1976:	b6 01       	movw	r22, r12
    1978:	80 e3       	ldi	r24, 0x30	; 48
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <fputc>
    1980:	9a 94       	dec	r9
    1982:	f7 cf       	rjmp	.-18     	; 0x1972 <vfprintf+0x372>
    1984:	8a 94       	dec	r8
    1986:	f3 01       	movw	r30, r6
    1988:	e8 0d       	add	r30, r8
    198a:	f1 1d       	adc	r31, r1
    198c:	80 81       	ld	r24, Z
    198e:	b6 01       	movw	r22, r12
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <fputc>
    1996:	81 10       	cpse	r8, r1
    1998:	f5 cf       	rjmp	.-22     	; 0x1984 <vfprintf+0x384>
    199a:	22 20       	and	r2, r2
    199c:	09 f4       	brne	.+2      	; 0x19a0 <vfprintf+0x3a0>
    199e:	42 ce       	rjmp	.-892    	; 0x1624 <vfprintf+0x24>
    19a0:	b6 01       	movw	r22, r12
    19a2:	80 e2       	ldi	r24, 0x20	; 32
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <fputc>
    19aa:	2a 94       	dec	r2
    19ac:	f6 cf       	rjmp	.-20     	; 0x199a <vfprintf+0x39a>
    19ae:	f6 01       	movw	r30, r12
    19b0:	86 81       	ldd	r24, Z+6	; 0x06
    19b2:	97 81       	ldd	r25, Z+7	; 0x07
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <vfprintf+0x3ba>
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	9f ef       	ldi	r25, 0xFF	; 255
    19ba:	2b 96       	adiw	r28, 0x0b	; 11
    19bc:	e2 e1       	ldi	r30, 0x12	; 18
    19be:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__epilogue_restores__>

000019c2 <strnlen_P>:
    19c2:	fc 01       	movw	r30, r24
    19c4:	05 90       	lpm	r0, Z+
    19c6:	61 50       	subi	r22, 0x01	; 1
    19c8:	70 40       	sbci	r23, 0x00	; 0
    19ca:	01 10       	cpse	r0, r1
    19cc:	d8 f7       	brcc	.-10     	; 0x19c4 <strnlen_P+0x2>
    19ce:	80 95       	com	r24
    19d0:	90 95       	com	r25
    19d2:	8e 0f       	add	r24, r30
    19d4:	9f 1f       	adc	r25, r31
    19d6:	08 95       	ret

000019d8 <strnlen>:
    19d8:	fc 01       	movw	r30, r24
    19da:	61 50       	subi	r22, 0x01	; 1
    19dc:	70 40       	sbci	r23, 0x00	; 0
    19de:	01 90       	ld	r0, Z+
    19e0:	01 10       	cpse	r0, r1
    19e2:	d8 f7       	brcc	.-10     	; 0x19da <strnlen+0x2>
    19e4:	80 95       	com	r24
    19e6:	90 95       	com	r25
    19e8:	8e 0f       	add	r24, r30
    19ea:	9f 1f       	adc	r25, r31
    19ec:	08 95       	ret

000019ee <fputc>:
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	fb 01       	movw	r30, r22
    19f8:	23 81       	ldd	r18, Z+3	; 0x03
    19fa:	21 fd       	sbrc	r18, 1
    19fc:	03 c0       	rjmp	.+6      	; 0x1a04 <fputc+0x16>
    19fe:	8f ef       	ldi	r24, 0xFF	; 255
    1a00:	9f ef       	ldi	r25, 0xFF	; 255
    1a02:	2c c0       	rjmp	.+88     	; 0x1a5c <fputc+0x6e>
    1a04:	22 ff       	sbrs	r18, 2
    1a06:	16 c0       	rjmp	.+44     	; 0x1a34 <fputc+0x46>
    1a08:	46 81       	ldd	r20, Z+6	; 0x06
    1a0a:	57 81       	ldd	r21, Z+7	; 0x07
    1a0c:	24 81       	ldd	r18, Z+4	; 0x04
    1a0e:	35 81       	ldd	r19, Z+5	; 0x05
    1a10:	42 17       	cp	r20, r18
    1a12:	53 07       	cpc	r21, r19
    1a14:	44 f4       	brge	.+16     	; 0x1a26 <fputc+0x38>
    1a16:	a0 81       	ld	r26, Z
    1a18:	b1 81       	ldd	r27, Z+1	; 0x01
    1a1a:	9d 01       	movw	r18, r26
    1a1c:	2f 5f       	subi	r18, 0xFF	; 255
    1a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a20:	31 83       	std	Z+1, r19	; 0x01
    1a22:	20 83       	st	Z, r18
    1a24:	8c 93       	st	X, r24
    1a26:	26 81       	ldd	r18, Z+6	; 0x06
    1a28:	37 81       	ldd	r19, Z+7	; 0x07
    1a2a:	2f 5f       	subi	r18, 0xFF	; 255
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	37 83       	std	Z+7, r19	; 0x07
    1a30:	26 83       	std	Z+6, r18	; 0x06
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <fputc+0x6e>
    1a34:	8b 01       	movw	r16, r22
    1a36:	ec 01       	movw	r28, r24
    1a38:	fb 01       	movw	r30, r22
    1a3a:	00 84       	ldd	r0, Z+8	; 0x08
    1a3c:	f1 85       	ldd	r31, Z+9	; 0x09
    1a3e:	e0 2d       	mov	r30, r0
    1a40:	09 95       	icall
    1a42:	89 2b       	or	r24, r25
    1a44:	e1 f6       	brne	.-72     	; 0x19fe <fputc+0x10>
    1a46:	d8 01       	movw	r26, r16
    1a48:	16 96       	adiw	r26, 0x06	; 6
    1a4a:	8d 91       	ld	r24, X+
    1a4c:	9c 91       	ld	r25, X
    1a4e:	17 97       	sbiw	r26, 0x07	; 7
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	17 96       	adiw	r26, 0x07	; 7
    1a54:	9c 93       	st	X, r25
    1a56:	8e 93       	st	-X, r24
    1a58:	16 97       	sbiw	r26, 0x06	; 6
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	1f 91       	pop	r17
    1a62:	0f 91       	pop	r16
    1a64:	08 95       	ret

00001a66 <__ultoa_invert>:
    1a66:	fa 01       	movw	r30, r20
    1a68:	aa 27       	eor	r26, r26
    1a6a:	28 30       	cpi	r18, 0x08	; 8
    1a6c:	51 f1       	breq	.+84     	; 0x1ac2 <__ultoa_invert+0x5c>
    1a6e:	20 31       	cpi	r18, 0x10	; 16
    1a70:	81 f1       	breq	.+96     	; 0x1ad2 <__ultoa_invert+0x6c>
    1a72:	e8 94       	clt
    1a74:	6f 93       	push	r22
    1a76:	6e 7f       	andi	r22, 0xFE	; 254
    1a78:	6e 5f       	subi	r22, 0xFE	; 254
    1a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	af 4f       	sbci	r26, 0xFF	; 255
    1a82:	b1 e0       	ldi	r27, 0x01	; 1
    1a84:	3e d0       	rcall	.+124    	; 0x1b02 <__ultoa_invert+0x9c>
    1a86:	b4 e0       	ldi	r27, 0x04	; 4
    1a88:	3c d0       	rcall	.+120    	; 0x1b02 <__ultoa_invert+0x9c>
    1a8a:	67 0f       	add	r22, r23
    1a8c:	78 1f       	adc	r23, r24
    1a8e:	89 1f       	adc	r24, r25
    1a90:	9a 1f       	adc	r25, r26
    1a92:	a1 1d       	adc	r26, r1
    1a94:	68 0f       	add	r22, r24
    1a96:	79 1f       	adc	r23, r25
    1a98:	8a 1f       	adc	r24, r26
    1a9a:	91 1d       	adc	r25, r1
    1a9c:	a1 1d       	adc	r26, r1
    1a9e:	6a 0f       	add	r22, r26
    1aa0:	71 1d       	adc	r23, r1
    1aa2:	81 1d       	adc	r24, r1
    1aa4:	91 1d       	adc	r25, r1
    1aa6:	a1 1d       	adc	r26, r1
    1aa8:	20 d0       	rcall	.+64     	; 0x1aea <__ultoa_invert+0x84>
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <__ultoa_invert+0x48>
    1aac:	68 94       	set
    1aae:	3f 91       	pop	r19
    1ab0:	2a e0       	ldi	r18, 0x0A	; 10
    1ab2:	26 9f       	mul	r18, r22
    1ab4:	11 24       	eor	r1, r1
    1ab6:	30 19       	sub	r19, r0
    1ab8:	30 5d       	subi	r19, 0xD0	; 208
    1aba:	31 93       	st	Z+, r19
    1abc:	de f6       	brtc	.-74     	; 0x1a74 <__ultoa_invert+0xe>
    1abe:	cf 01       	movw	r24, r30
    1ac0:	08 95       	ret
    1ac2:	46 2f       	mov	r20, r22
    1ac4:	47 70       	andi	r20, 0x07	; 7
    1ac6:	40 5d       	subi	r20, 0xD0	; 208
    1ac8:	41 93       	st	Z+, r20
    1aca:	b3 e0       	ldi	r27, 0x03	; 3
    1acc:	0f d0       	rcall	.+30     	; 0x1aec <__ultoa_invert+0x86>
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__ultoa_invert+0x5c>
    1ad0:	f6 cf       	rjmp	.-20     	; 0x1abe <__ultoa_invert+0x58>
    1ad2:	46 2f       	mov	r20, r22
    1ad4:	4f 70       	andi	r20, 0x0F	; 15
    1ad6:	40 5d       	subi	r20, 0xD0	; 208
    1ad8:	4a 33       	cpi	r20, 0x3A	; 58
    1ada:	18 f0       	brcs	.+6      	; 0x1ae2 <__ultoa_invert+0x7c>
    1adc:	49 5d       	subi	r20, 0xD9	; 217
    1ade:	31 fd       	sbrc	r19, 1
    1ae0:	40 52       	subi	r20, 0x20	; 32
    1ae2:	41 93       	st	Z+, r20
    1ae4:	02 d0       	rcall	.+4      	; 0x1aea <__ultoa_invert+0x84>
    1ae6:	a9 f7       	brne	.-22     	; 0x1ad2 <__ultoa_invert+0x6c>
    1ae8:	ea cf       	rjmp	.-44     	; 0x1abe <__ultoa_invert+0x58>
    1aea:	b4 e0       	ldi	r27, 0x04	; 4
    1aec:	a6 95       	lsr	r26
    1aee:	97 95       	ror	r25
    1af0:	87 95       	ror	r24
    1af2:	77 95       	ror	r23
    1af4:	67 95       	ror	r22
    1af6:	ba 95       	dec	r27
    1af8:	c9 f7       	brne	.-14     	; 0x1aec <__ultoa_invert+0x86>
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	61 05       	cpc	r22, r1
    1afe:	71 05       	cpc	r23, r1
    1b00:	08 95       	ret
    1b02:	9b 01       	movw	r18, r22
    1b04:	ac 01       	movw	r20, r24
    1b06:	0a 2e       	mov	r0, r26
    1b08:	06 94       	lsr	r0
    1b0a:	57 95       	ror	r21
    1b0c:	47 95       	ror	r20
    1b0e:	37 95       	ror	r19
    1b10:	27 95       	ror	r18
    1b12:	ba 95       	dec	r27
    1b14:	c9 f7       	brne	.-14     	; 0x1b08 <__ultoa_invert+0xa2>
    1b16:	62 0f       	add	r22, r18
    1b18:	73 1f       	adc	r23, r19
    1b1a:	84 1f       	adc	r24, r20
    1b1c:	95 1f       	adc	r25, r21
    1b1e:	a0 1d       	adc	r26, r0
    1b20:	08 95       	ret

00001b22 <__divmodsi4>:
    1b22:	05 2e       	mov	r0, r21
    1b24:	97 fb       	bst	r25, 7
    1b26:	1e f4       	brtc	.+6      	; 0x1b2e <__divmodsi4+0xc>
    1b28:	00 94       	com	r0
    1b2a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__negsi2>
    1b2e:	57 fd       	sbrc	r21, 7
    1b30:	07 d0       	rcall	.+14     	; 0x1b40 <__divmodsi4_neg2>
    1b32:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__udivmodsi4>
    1b36:	07 fc       	sbrc	r0, 7
    1b38:	03 d0       	rcall	.+6      	; 0x1b40 <__divmodsi4_neg2>
    1b3a:	4e f4       	brtc	.+18     	; 0x1b4e <__divmodsi4_exit>
    1b3c:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__negsi2>

00001b40 <__divmodsi4_neg2>:
    1b40:	50 95       	com	r21
    1b42:	40 95       	com	r20
    1b44:	30 95       	com	r19
    1b46:	21 95       	neg	r18
    1b48:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4a:	4f 4f       	sbci	r20, 0xFF	; 255
    1b4c:	5f 4f       	sbci	r21, 0xFF	; 255

00001b4e <__divmodsi4_exit>:
    1b4e:	08 95       	ret

00001b50 <__negsi2>:
    1b50:	90 95       	com	r25
    1b52:	80 95       	com	r24
    1b54:	70 95       	com	r23
    1b56:	61 95       	neg	r22
    1b58:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	08 95       	ret

00001b60 <__muluhisi3>:
    1b60:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__umulhisi3>
    1b64:	a5 9f       	mul	r26, r21
    1b66:	90 0d       	add	r25, r0
    1b68:	b4 9f       	mul	r27, r20
    1b6a:	90 0d       	add	r25, r0
    1b6c:	a4 9f       	mul	r26, r20
    1b6e:	80 0d       	add	r24, r0
    1b70:	91 1d       	adc	r25, r1
    1b72:	11 24       	eor	r1, r1
    1b74:	08 95       	ret

00001b76 <__mulshisi3>:
    1b76:	b7 ff       	sbrs	r27, 7
    1b78:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__muluhisi3>

00001b7c <__mulohisi3>:
    1b7c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__muluhisi3>
    1b80:	82 1b       	sub	r24, r18
    1b82:	93 0b       	sbc	r25, r19
    1b84:	08 95       	ret

00001b86 <__prologue_saves__>:
    1b86:	2f 92       	push	r2
    1b88:	3f 92       	push	r3
    1b8a:	4f 92       	push	r4
    1b8c:	5f 92       	push	r5
    1b8e:	6f 92       	push	r6
    1b90:	7f 92       	push	r7
    1b92:	8f 92       	push	r8
    1b94:	9f 92       	push	r9
    1b96:	af 92       	push	r10
    1b98:	bf 92       	push	r11
    1b9a:	cf 92       	push	r12
    1b9c:	df 92       	push	r13
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	ca 1b       	sub	r28, r26
    1bb0:	db 0b       	sbc	r29, r27
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	09 94       	ijmp

00001bbe <__epilogue_restores__>:
    1bbe:	2a 88       	ldd	r2, Y+18	; 0x12
    1bc0:	39 88       	ldd	r3, Y+17	; 0x11
    1bc2:	48 88       	ldd	r4, Y+16	; 0x10
    1bc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bca:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bce:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bd0:	b9 84       	ldd	r11, Y+9	; 0x09
    1bd2:	c8 84       	ldd	r12, Y+8	; 0x08
    1bd4:	df 80       	ldd	r13, Y+7	; 0x07
    1bd6:	ee 80       	ldd	r14, Y+6	; 0x06
    1bd8:	fd 80       	ldd	r15, Y+5	; 0x05
    1bda:	0c 81       	ldd	r16, Y+4	; 0x04
    1bdc:	1b 81       	ldd	r17, Y+3	; 0x03
    1bde:	aa 81       	ldd	r26, Y+2	; 0x02
    1be0:	b9 81       	ldd	r27, Y+1	; 0x01
    1be2:	ce 0f       	add	r28, r30
    1be4:	d1 1d       	adc	r29, r1
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	ed 01       	movw	r28, r26
    1bf2:	08 95       	ret

00001bf4 <__udivmodsi4>:
    1bf4:	a1 e2       	ldi	r26, 0x21	; 33
    1bf6:	1a 2e       	mov	r1, r26
    1bf8:	aa 1b       	sub	r26, r26
    1bfa:	bb 1b       	sub	r27, r27
    1bfc:	fd 01       	movw	r30, r26
    1bfe:	0d c0       	rjmp	.+26     	; 0x1c1a <__udivmodsi4_ep>

00001c00 <__udivmodsi4_loop>:
    1c00:	aa 1f       	adc	r26, r26
    1c02:	bb 1f       	adc	r27, r27
    1c04:	ee 1f       	adc	r30, r30
    1c06:	ff 1f       	adc	r31, r31
    1c08:	a2 17       	cp	r26, r18
    1c0a:	b3 07       	cpc	r27, r19
    1c0c:	e4 07       	cpc	r30, r20
    1c0e:	f5 07       	cpc	r31, r21
    1c10:	20 f0       	brcs	.+8      	; 0x1c1a <__udivmodsi4_ep>
    1c12:	a2 1b       	sub	r26, r18
    1c14:	b3 0b       	sbc	r27, r19
    1c16:	e4 0b       	sbc	r30, r20
    1c18:	f5 0b       	sbc	r31, r21

00001c1a <__udivmodsi4_ep>:
    1c1a:	66 1f       	adc	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	1a 94       	dec	r1
    1c24:	69 f7       	brne	.-38     	; 0x1c00 <__udivmodsi4_loop>
    1c26:	60 95       	com	r22
    1c28:	70 95       	com	r23
    1c2a:	80 95       	com	r24
    1c2c:	90 95       	com	r25
    1c2e:	9b 01       	movw	r18, r22
    1c30:	ac 01       	movw	r20, r24
    1c32:	bd 01       	movw	r22, r26
    1c34:	cf 01       	movw	r24, r30
    1c36:	08 95       	ret

00001c38 <__umulhisi3>:
    1c38:	a2 9f       	mul	r26, r18
    1c3a:	b0 01       	movw	r22, r0
    1c3c:	b3 9f       	mul	r27, r19
    1c3e:	c0 01       	movw	r24, r0
    1c40:	a3 9f       	mul	r26, r19
    1c42:	70 0d       	add	r23, r0
    1c44:	81 1d       	adc	r24, r1
    1c46:	11 24       	eor	r1, r1
    1c48:	91 1d       	adc	r25, r1
    1c4a:	b2 9f       	mul	r27, r18
    1c4c:	70 0d       	add	r23, r0
    1c4e:	81 1d       	adc	r24, r1
    1c50:	11 24       	eor	r1, r1
    1c52:	91 1d       	adc	r25, r1
    1c54:	08 95       	ret

00001c56 <_exit>:
    1c56:	f8 94       	cli

00001c58 <__stop_program>:
    1c58:	ff cf       	rjmp	.-2      	; 0x1c58 <__stop_program>
