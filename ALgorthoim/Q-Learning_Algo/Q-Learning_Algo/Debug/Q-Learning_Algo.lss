
Q-Learning_Algo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002a4  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000785  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006df  00000000  00000000  00000b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000284  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c6  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000018ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a4 e0       	ldi	r26, 0x04	; 4
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e4 ea       	ldi	r30, 0xA4	; 164
  8c:	f2 e0       	ldi	r31, 0x02	; 2
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
  9a:	0e 94 5d 00 	call	0xba	; 0xba <main>
  9e:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Explore_Exploit>:
int epsilon=0.98;            //train test constant degradation value 
void update_epsilon(){
	epsilon*=epsilon;
}
void Explore_Exploit(){      //returns true if explore, false if exploit
	int randomno=rand()%100;
  a6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <rand>
  aa:	64 e6       	ldi	r22, 0x64	; 100
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	0e 94 69 00 	call	0xd2	; 0xd2 <__divmodhi4>
	DDRD=0xff;
  b2:	9f ef       	ldi	r25, 0xFF	; 255
  b4:	9a b9       	out	0x0a, r25	; 10
	PORTD=randomno;
  b6:	8b b9       	out	0x0b, r24	; 11
  b8:	08 95       	ret

000000ba <main>:

int main(void)
{
    while (1) 
    {
		Explore_Exploit();
  ba:	0e 94 53 00 	call	0xa6	; 0xa6 <Explore_Exploit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f e7       	ldi	r18, 0x7F	; 127
  c0:	8a e1       	ldi	r24, 0x1A	; 26
  c2:	96 e0       	ldi	r25, 0x06	; 6
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0xa>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x14>
  ce:	00 00       	nop
  d0:	f4 cf       	rjmp	.-24     	; 0xba <main>

000000d2 <__divmodhi4>:
  d2:	97 fb       	bst	r25, 7
  d4:	07 2e       	mov	r0, r23
  d6:	16 f4       	brtc	.+4      	; 0xdc <__divmodhi4+0xa>
  d8:	00 94       	com	r0
  da:	07 d0       	rcall	.+14     	; 0xea <__divmodhi4_neg1>
  dc:	77 fd       	sbrc	r23, 7
  de:	09 d0       	rcall	.+18     	; 0xf2 <__divmodhi4_neg2>
  e0:	0e 94 7d 00 	call	0xfa	; 0xfa <__udivmodhi4>
  e4:	07 fc       	sbrc	r0, 7
  e6:	05 d0       	rcall	.+10     	; 0xf2 <__divmodhi4_neg2>
  e8:	3e f4       	brtc	.+14     	; 0xf8 <__divmodhi4_exit>

000000ea <__divmodhi4_neg1>:
  ea:	90 95       	com	r25
  ec:	81 95       	neg	r24
  ee:	9f 4f       	sbci	r25, 0xFF	; 255
  f0:	08 95       	ret

000000f2 <__divmodhi4_neg2>:
  f2:	70 95       	com	r23
  f4:	61 95       	neg	r22
  f6:	7f 4f       	sbci	r23, 0xFF	; 255

000000f8 <__divmodhi4_exit>:
  f8:	08 95       	ret

000000fa <__udivmodhi4>:
  fa:	aa 1b       	sub	r26, r26
  fc:	bb 1b       	sub	r27, r27
  fe:	51 e1       	ldi	r21, 0x11	; 17
 100:	07 c0       	rjmp	.+14     	; 0x110 <__udivmodhi4_ep>

00000102 <__udivmodhi4_loop>:
 102:	aa 1f       	adc	r26, r26
 104:	bb 1f       	adc	r27, r27
 106:	a6 17       	cp	r26, r22
 108:	b7 07       	cpc	r27, r23
 10a:	10 f0       	brcs	.+4      	; 0x110 <__udivmodhi4_ep>
 10c:	a6 1b       	sub	r26, r22
 10e:	b7 0b       	sbc	r27, r23

00000110 <__udivmodhi4_ep>:
 110:	88 1f       	adc	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	5a 95       	dec	r21
 116:	a9 f7       	brne	.-22     	; 0x102 <__udivmodhi4_loop>
 118:	80 95       	com	r24
 11a:	90 95       	com	r25
 11c:	bc 01       	movw	r22, r24
 11e:	cd 01       	movw	r24, r26
 120:	08 95       	ret

00000122 <do_rand>:
 122:	8f 92       	push	r8
 124:	9f 92       	push	r9
 126:	af 92       	push	r10
 128:	bf 92       	push	r11
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
 138:	68 81       	ld	r22, Y
 13a:	79 81       	ldd	r23, Y+1	; 0x01
 13c:	8a 81       	ldd	r24, Y+2	; 0x02
 13e:	9b 81       	ldd	r25, Y+3	; 0x03
 140:	61 15       	cp	r22, r1
 142:	71 05       	cpc	r23, r1
 144:	81 05       	cpc	r24, r1
 146:	91 05       	cpc	r25, r1
 148:	21 f4       	brne	.+8      	; 0x152 <do_rand+0x30>
 14a:	64 e2       	ldi	r22, 0x24	; 36
 14c:	79 ed       	ldi	r23, 0xD9	; 217
 14e:	8b e5       	ldi	r24, 0x5B	; 91
 150:	97 e0       	ldi	r25, 0x07	; 7
 152:	2d e1       	ldi	r18, 0x1D	; 29
 154:	33 ef       	ldi	r19, 0xF3	; 243
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	0e 94 ed 00 	call	0x1da	; 0x1da <__divmodsi4>
 15e:	49 01       	movw	r8, r18
 160:	5a 01       	movw	r10, r20
 162:	9b 01       	movw	r18, r22
 164:	ac 01       	movw	r20, r24
 166:	a7 ea       	ldi	r26, 0xA7	; 167
 168:	b1 e4       	ldi	r27, 0x41	; 65
 16a:	0e 94 0c 01 	call	0x218	; 0x218 <__muluhisi3>
 16e:	6b 01       	movw	r12, r22
 170:	7c 01       	movw	r14, r24
 172:	ac ee       	ldi	r26, 0xEC	; 236
 174:	b4 ef       	ldi	r27, 0xF4	; 244
 176:	a5 01       	movw	r20, r10
 178:	94 01       	movw	r18, r8
 17a:	0e 94 1a 01 	call	0x234	; 0x234 <__mulohisi3>
 17e:	dc 01       	movw	r26, r24
 180:	cb 01       	movw	r24, r22
 182:	8c 0d       	add	r24, r12
 184:	9d 1d       	adc	r25, r13
 186:	ae 1d       	adc	r26, r14
 188:	bf 1d       	adc	r27, r15
 18a:	b7 ff       	sbrs	r27, 7
 18c:	03 c0       	rjmp	.+6      	; 0x194 <do_rand+0x72>
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	a1 09       	sbc	r26, r1
 192:	b0 48       	sbci	r27, 0x80	; 128
 194:	88 83       	st	Y, r24
 196:	99 83       	std	Y+1, r25	; 0x01
 198:	aa 83       	std	Y+2, r26	; 0x02
 19a:	bb 83       	std	Y+3, r27	; 0x03
 19c:	9f 77       	andi	r25, 0x7F	; 127
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	bf 90       	pop	r11
 1ac:	af 90       	pop	r10
 1ae:	9f 90       	pop	r9
 1b0:	8f 90       	pop	r8
 1b2:	08 95       	ret

000001b4 <rand_r>:
 1b4:	0e 94 91 00 	call	0x122	; 0x122 <do_rand>
 1b8:	08 95       	ret

000001ba <rand>:
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	0e 94 91 00 	call	0x122	; 0x122 <do_rand>
 1c2:	08 95       	ret

000001c4 <srand>:
 1c4:	a0 e0       	ldi	r26, 0x00	; 0
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1d4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1d8:	08 95       	ret

000001da <__divmodsi4>:
 1da:	05 2e       	mov	r0, r21
 1dc:	97 fb       	bst	r25, 7
 1de:	1e f4       	brtc	.+6      	; 0x1e6 <__divmodsi4+0xc>
 1e0:	00 94       	com	r0
 1e2:	0e 94 04 01 	call	0x208	; 0x208 <__negsi2>
 1e6:	57 fd       	sbrc	r21, 7
 1e8:	07 d0       	rcall	.+14     	; 0x1f8 <__divmodsi4_neg2>
 1ea:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodsi4>
 1ee:	07 fc       	sbrc	r0, 7
 1f0:	03 d0       	rcall	.+6      	; 0x1f8 <__divmodsi4_neg2>
 1f2:	4e f4       	brtc	.+18     	; 0x206 <__divmodsi4_exit>
 1f4:	0c 94 04 01 	jmp	0x208	; 0x208 <__negsi2>

000001f8 <__divmodsi4_neg2>:
 1f8:	50 95       	com	r21
 1fa:	40 95       	com	r20
 1fc:	30 95       	com	r19
 1fe:	21 95       	neg	r18
 200:	3f 4f       	sbci	r19, 0xFF	; 255
 202:	4f 4f       	sbci	r20, 0xFF	; 255
 204:	5f 4f       	sbci	r21, 0xFF	; 255

00000206 <__divmodsi4_exit>:
 206:	08 95       	ret

00000208 <__negsi2>:
 208:	90 95       	com	r25
 20a:	80 95       	com	r24
 20c:	70 95       	com	r23
 20e:	61 95       	neg	r22
 210:	7f 4f       	sbci	r23, 0xFF	; 255
 212:	8f 4f       	sbci	r24, 0xFF	; 255
 214:	9f 4f       	sbci	r25, 0xFF	; 255
 216:	08 95       	ret

00000218 <__muluhisi3>:
 218:	0e 94 41 01 	call	0x282	; 0x282 <__umulhisi3>
 21c:	a5 9f       	mul	r26, r21
 21e:	90 0d       	add	r25, r0
 220:	b4 9f       	mul	r27, r20
 222:	90 0d       	add	r25, r0
 224:	a4 9f       	mul	r26, r20
 226:	80 0d       	add	r24, r0
 228:	91 1d       	adc	r25, r1
 22a:	11 24       	eor	r1, r1
 22c:	08 95       	ret

0000022e <__mulshisi3>:
 22e:	b7 ff       	sbrs	r27, 7
 230:	0c 94 0c 01 	jmp	0x218	; 0x218 <__muluhisi3>

00000234 <__mulohisi3>:
 234:	0e 94 0c 01 	call	0x218	; 0x218 <__muluhisi3>
 238:	82 1b       	sub	r24, r18
 23a:	93 0b       	sbc	r25, r19
 23c:	08 95       	ret

0000023e <__udivmodsi4>:
 23e:	a1 e2       	ldi	r26, 0x21	; 33
 240:	1a 2e       	mov	r1, r26
 242:	aa 1b       	sub	r26, r26
 244:	bb 1b       	sub	r27, r27
 246:	fd 01       	movw	r30, r26
 248:	0d c0       	rjmp	.+26     	; 0x264 <__udivmodsi4_ep>

0000024a <__udivmodsi4_loop>:
 24a:	aa 1f       	adc	r26, r26
 24c:	bb 1f       	adc	r27, r27
 24e:	ee 1f       	adc	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	a2 17       	cp	r26, r18
 254:	b3 07       	cpc	r27, r19
 256:	e4 07       	cpc	r30, r20
 258:	f5 07       	cpc	r31, r21
 25a:	20 f0       	brcs	.+8      	; 0x264 <__udivmodsi4_ep>
 25c:	a2 1b       	sub	r26, r18
 25e:	b3 0b       	sbc	r27, r19
 260:	e4 0b       	sbc	r30, r20
 262:	f5 0b       	sbc	r31, r21

00000264 <__udivmodsi4_ep>:
 264:	66 1f       	adc	r22, r22
 266:	77 1f       	adc	r23, r23
 268:	88 1f       	adc	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	1a 94       	dec	r1
 26e:	69 f7       	brne	.-38     	; 0x24a <__udivmodsi4_loop>
 270:	60 95       	com	r22
 272:	70 95       	com	r23
 274:	80 95       	com	r24
 276:	90 95       	com	r25
 278:	9b 01       	movw	r18, r22
 27a:	ac 01       	movw	r20, r24
 27c:	bd 01       	movw	r22, r26
 27e:	cf 01       	movw	r24, r30
 280:	08 95       	ret

00000282 <__umulhisi3>:
 282:	a2 9f       	mul	r26, r18
 284:	b0 01       	movw	r22, r0
 286:	b3 9f       	mul	r27, r19
 288:	c0 01       	movw	r24, r0
 28a:	a3 9f       	mul	r26, r19
 28c:	70 0d       	add	r23, r0
 28e:	81 1d       	adc	r24, r1
 290:	11 24       	eor	r1, r1
 292:	91 1d       	adc	r25, r1
 294:	b2 9f       	mul	r27, r18
 296:	70 0d       	add	r23, r0
 298:	81 1d       	adc	r24, r1
 29a:	11 24       	eor	r1, r1
 29c:	91 1d       	adc	r25, r1
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
